
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model AccidentInfo
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export type AccidentInfo = $Result.DefaultSelection<Prisma.$AccidentInfoPayload>
/**
 * Model RequestPlaces
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export type RequestPlaces = $Result.DefaultSelection<Prisma.$RequestPlacesPayload>
/**
 * Model UserInfo
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 * This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
 */
export type UserInfo = $Result.DefaultSelection<Prisma.$UserInfoPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more AccidentInfos
 * const accidentInfos = await prisma.accidentInfo.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more AccidentInfos
   * const accidentInfos = await prisma.accidentInfo.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.accidentInfo`: Exposes CRUD operations for the **AccidentInfo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AccidentInfos
    * const accidentInfos = await prisma.accidentInfo.findMany()
    * ```
    */
  get accidentInfo(): Prisma.AccidentInfoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.requestPlaces`: Exposes CRUD operations for the **RequestPlaces** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RequestPlaces
    * const requestPlaces = await prisma.requestPlaces.findMany()
    * ```
    */
  get requestPlaces(): Prisma.RequestPlacesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userInfo`: Exposes CRUD operations for the **UserInfo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserInfos
    * const userInfos = await prisma.userInfo.findMany()
    * ```
    */
  get userInfo(): Prisma.UserInfoDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.8.2
   * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    AccidentInfo: 'AccidentInfo',
    RequestPlaces: 'RequestPlaces',
    UserInfo: 'UserInfo'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "accidentInfo" | "requestPlaces" | "userInfo"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      AccidentInfo: {
        payload: Prisma.$AccidentInfoPayload<ExtArgs>
        fields: Prisma.AccidentInfoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccidentInfoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccidentInfoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccidentInfoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccidentInfoPayload>
          }
          findFirst: {
            args: Prisma.AccidentInfoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccidentInfoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccidentInfoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccidentInfoPayload>
          }
          findMany: {
            args: Prisma.AccidentInfoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccidentInfoPayload>[]
          }
          create: {
            args: Prisma.AccidentInfoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccidentInfoPayload>
          }
          createMany: {
            args: Prisma.AccidentInfoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccidentInfoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccidentInfoPayload>[]
          }
          delete: {
            args: Prisma.AccidentInfoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccidentInfoPayload>
          }
          update: {
            args: Prisma.AccidentInfoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccidentInfoPayload>
          }
          deleteMany: {
            args: Prisma.AccidentInfoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccidentInfoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AccidentInfoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccidentInfoPayload>[]
          }
          upsert: {
            args: Prisma.AccidentInfoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccidentInfoPayload>
          }
          aggregate: {
            args: Prisma.AccidentInfoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccidentInfo>
          }
          groupBy: {
            args: Prisma.AccidentInfoGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccidentInfoGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccidentInfoCountArgs<ExtArgs>
            result: $Utils.Optional<AccidentInfoCountAggregateOutputType> | number
          }
        }
      }
      RequestPlaces: {
        payload: Prisma.$RequestPlacesPayload<ExtArgs>
        fields: Prisma.RequestPlacesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RequestPlacesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestPlacesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RequestPlacesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestPlacesPayload>
          }
          findFirst: {
            args: Prisma.RequestPlacesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestPlacesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RequestPlacesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestPlacesPayload>
          }
          findMany: {
            args: Prisma.RequestPlacesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestPlacesPayload>[]
          }
          create: {
            args: Prisma.RequestPlacesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestPlacesPayload>
          }
          createMany: {
            args: Prisma.RequestPlacesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RequestPlacesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestPlacesPayload>[]
          }
          delete: {
            args: Prisma.RequestPlacesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestPlacesPayload>
          }
          update: {
            args: Prisma.RequestPlacesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestPlacesPayload>
          }
          deleteMany: {
            args: Prisma.RequestPlacesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RequestPlacesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RequestPlacesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestPlacesPayload>[]
          }
          upsert: {
            args: Prisma.RequestPlacesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestPlacesPayload>
          }
          aggregate: {
            args: Prisma.RequestPlacesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRequestPlaces>
          }
          groupBy: {
            args: Prisma.RequestPlacesGroupByArgs<ExtArgs>
            result: $Utils.Optional<RequestPlacesGroupByOutputType>[]
          }
          count: {
            args: Prisma.RequestPlacesCountArgs<ExtArgs>
            result: $Utils.Optional<RequestPlacesCountAggregateOutputType> | number
          }
        }
      }
      UserInfo: {
        payload: Prisma.$UserInfoPayload<ExtArgs>
        fields: Prisma.UserInfoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserInfoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInfoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserInfoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInfoPayload>
          }
          findFirst: {
            args: Prisma.UserInfoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInfoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserInfoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInfoPayload>
          }
          findMany: {
            args: Prisma.UserInfoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInfoPayload>[]
          }
          create: {
            args: Prisma.UserInfoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInfoPayload>
          }
          createMany: {
            args: Prisma.UserInfoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserInfoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInfoPayload>[]
          }
          delete: {
            args: Prisma.UserInfoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInfoPayload>
          }
          update: {
            args: Prisma.UserInfoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInfoPayload>
          }
          deleteMany: {
            args: Prisma.UserInfoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserInfoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserInfoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInfoPayload>[]
          }
          upsert: {
            args: Prisma.UserInfoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInfoPayload>
          }
          aggregate: {
            args: Prisma.UserInfoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserInfo>
          }
          groupBy: {
            args: Prisma.UserInfoGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserInfoGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserInfoCountArgs<ExtArgs>
            result: $Utils.Optional<UserInfoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    accidentInfo?: AccidentInfoOmit
    requestPlaces?: RequestPlacesOmit
    userInfo?: UserInfoOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserInfoCountOutputType
   */

  export type UserInfoCountOutputType = {
    AccidentInfo: number
    RequestPlaces: number
  }

  export type UserInfoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    AccidentInfo?: boolean | UserInfoCountOutputTypeCountAccidentInfoArgs
    RequestPlaces?: boolean | UserInfoCountOutputTypeCountRequestPlacesArgs
  }

  // Custom InputTypes
  /**
   * UserInfoCountOutputType without action
   */
  export type UserInfoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInfoCountOutputType
     */
    select?: UserInfoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserInfoCountOutputType without action
   */
  export type UserInfoCountOutputTypeCountAccidentInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccidentInfoWhereInput
  }

  /**
   * UserInfoCountOutputType without action
   */
  export type UserInfoCountOutputTypeCountRequestPlacesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RequestPlacesWhereInput
  }


  /**
   * Models
   */

  /**
   * Model AccidentInfo
   */

  export type AggregateAccidentInfo = {
    _count: AccidentInfoCountAggregateOutputType | null
    _min: AccidentInfoMinAggregateOutputType | null
    _max: AccidentInfoMaxAggregateOutputType | null
  }

  export type AccidentInfoMinAggregateOutputType = {
    id: string | null
    user_id: string | null
    acci_place: string | null
    acci_date: Date | null
    acci_time: Date | null
    security_contact_date: Date | null
    police_contact_date: Date | null
    police_contact_time: Date | null
  }

  export type AccidentInfoMaxAggregateOutputType = {
    id: string | null
    user_id: string | null
    acci_place: string | null
    acci_date: Date | null
    acci_time: Date | null
    security_contact_date: Date | null
    police_contact_date: Date | null
    police_contact_time: Date | null
  }

  export type AccidentInfoCountAggregateOutputType = {
    id: number
    user_id: number
    acci_place: number
    acci_date: number
    acci_time: number
    security_contact_date: number
    police_contact_date: number
    police_contact_time: number
    _all: number
  }


  export type AccidentInfoMinAggregateInputType = {
    id?: true
    user_id?: true
    acci_place?: true
    acci_date?: true
    acci_time?: true
    security_contact_date?: true
    police_contact_date?: true
    police_contact_time?: true
  }

  export type AccidentInfoMaxAggregateInputType = {
    id?: true
    user_id?: true
    acci_place?: true
    acci_date?: true
    acci_time?: true
    security_contact_date?: true
    police_contact_date?: true
    police_contact_time?: true
  }

  export type AccidentInfoCountAggregateInputType = {
    id?: true
    user_id?: true
    acci_place?: true
    acci_date?: true
    acci_time?: true
    security_contact_date?: true
    police_contact_date?: true
    police_contact_time?: true
    _all?: true
  }

  export type AccidentInfoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccidentInfo to aggregate.
     */
    where?: AccidentInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccidentInfos to fetch.
     */
    orderBy?: AccidentInfoOrderByWithRelationInput | AccidentInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccidentInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccidentInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccidentInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AccidentInfos
    **/
    _count?: true | AccidentInfoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccidentInfoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccidentInfoMaxAggregateInputType
  }

  export type GetAccidentInfoAggregateType<T extends AccidentInfoAggregateArgs> = {
        [P in keyof T & keyof AggregateAccidentInfo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccidentInfo[P]>
      : GetScalarType<T[P], AggregateAccidentInfo[P]>
  }




  export type AccidentInfoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccidentInfoWhereInput
    orderBy?: AccidentInfoOrderByWithAggregationInput | AccidentInfoOrderByWithAggregationInput[]
    by: AccidentInfoScalarFieldEnum[] | AccidentInfoScalarFieldEnum
    having?: AccidentInfoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccidentInfoCountAggregateInputType | true
    _min?: AccidentInfoMinAggregateInputType
    _max?: AccidentInfoMaxAggregateInputType
  }

  export type AccidentInfoGroupByOutputType = {
    id: string
    user_id: string
    acci_place: string
    acci_date: Date
    acci_time: Date
    security_contact_date: Date
    police_contact_date: Date
    police_contact_time: Date
    _count: AccidentInfoCountAggregateOutputType | null
    _min: AccidentInfoMinAggregateOutputType | null
    _max: AccidentInfoMaxAggregateOutputType | null
  }

  type GetAccidentInfoGroupByPayload<T extends AccidentInfoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccidentInfoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccidentInfoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccidentInfoGroupByOutputType[P]>
            : GetScalarType<T[P], AccidentInfoGroupByOutputType[P]>
        }
      >
    >


  export type AccidentInfoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    acci_place?: boolean
    acci_date?: boolean
    acci_time?: boolean
    security_contact_date?: boolean
    police_contact_date?: boolean
    police_contact_time?: boolean
    UserInfo?: boolean | UserInfoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["accidentInfo"]>

  export type AccidentInfoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    acci_place?: boolean
    acci_date?: boolean
    acci_time?: boolean
    security_contact_date?: boolean
    police_contact_date?: boolean
    police_contact_time?: boolean
    UserInfo?: boolean | UserInfoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["accidentInfo"]>

  export type AccidentInfoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    acci_place?: boolean
    acci_date?: boolean
    acci_time?: boolean
    security_contact_date?: boolean
    police_contact_date?: boolean
    police_contact_time?: boolean
    UserInfo?: boolean | UserInfoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["accidentInfo"]>

  export type AccidentInfoSelectScalar = {
    id?: boolean
    user_id?: boolean
    acci_place?: boolean
    acci_date?: boolean
    acci_time?: boolean
    security_contact_date?: boolean
    police_contact_date?: boolean
    police_contact_time?: boolean
  }

  export type AccidentInfoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "acci_place" | "acci_date" | "acci_time" | "security_contact_date" | "police_contact_date" | "police_contact_time", ExtArgs["result"]["accidentInfo"]>
  export type AccidentInfoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    UserInfo?: boolean | UserInfoDefaultArgs<ExtArgs>
  }
  export type AccidentInfoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    UserInfo?: boolean | UserInfoDefaultArgs<ExtArgs>
  }
  export type AccidentInfoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    UserInfo?: boolean | UserInfoDefaultArgs<ExtArgs>
  }

  export type $AccidentInfoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AccidentInfo"
    objects: {
      UserInfo: Prisma.$UserInfoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      user_id: string
      acci_place: string
      acci_date: Date
      acci_time: Date
      security_contact_date: Date
      police_contact_date: Date
      police_contact_time: Date
    }, ExtArgs["result"]["accidentInfo"]>
    composites: {}
  }

  type AccidentInfoGetPayload<S extends boolean | null | undefined | AccidentInfoDefaultArgs> = $Result.GetResult<Prisma.$AccidentInfoPayload, S>

  type AccidentInfoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccidentInfoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccidentInfoCountAggregateInputType | true
    }

  export interface AccidentInfoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AccidentInfo'], meta: { name: 'AccidentInfo' } }
    /**
     * Find zero or one AccidentInfo that matches the filter.
     * @param {AccidentInfoFindUniqueArgs} args - Arguments to find a AccidentInfo
     * @example
     * // Get one AccidentInfo
     * const accidentInfo = await prisma.accidentInfo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccidentInfoFindUniqueArgs>(args: SelectSubset<T, AccidentInfoFindUniqueArgs<ExtArgs>>): Prisma__AccidentInfoClient<$Result.GetResult<Prisma.$AccidentInfoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AccidentInfo that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccidentInfoFindUniqueOrThrowArgs} args - Arguments to find a AccidentInfo
     * @example
     * // Get one AccidentInfo
     * const accidentInfo = await prisma.accidentInfo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccidentInfoFindUniqueOrThrowArgs>(args: SelectSubset<T, AccidentInfoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccidentInfoClient<$Result.GetResult<Prisma.$AccidentInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AccidentInfo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccidentInfoFindFirstArgs} args - Arguments to find a AccidentInfo
     * @example
     * // Get one AccidentInfo
     * const accidentInfo = await prisma.accidentInfo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccidentInfoFindFirstArgs>(args?: SelectSubset<T, AccidentInfoFindFirstArgs<ExtArgs>>): Prisma__AccidentInfoClient<$Result.GetResult<Prisma.$AccidentInfoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AccidentInfo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccidentInfoFindFirstOrThrowArgs} args - Arguments to find a AccidentInfo
     * @example
     * // Get one AccidentInfo
     * const accidentInfo = await prisma.accidentInfo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccidentInfoFindFirstOrThrowArgs>(args?: SelectSubset<T, AccidentInfoFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccidentInfoClient<$Result.GetResult<Prisma.$AccidentInfoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AccidentInfos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccidentInfoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AccidentInfos
     * const accidentInfos = await prisma.accidentInfo.findMany()
     * 
     * // Get first 10 AccidentInfos
     * const accidentInfos = await prisma.accidentInfo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accidentInfoWithIdOnly = await prisma.accidentInfo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccidentInfoFindManyArgs>(args?: SelectSubset<T, AccidentInfoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccidentInfoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AccidentInfo.
     * @param {AccidentInfoCreateArgs} args - Arguments to create a AccidentInfo.
     * @example
     * // Create one AccidentInfo
     * const AccidentInfo = await prisma.accidentInfo.create({
     *   data: {
     *     // ... data to create a AccidentInfo
     *   }
     * })
     * 
     */
    create<T extends AccidentInfoCreateArgs>(args: SelectSubset<T, AccidentInfoCreateArgs<ExtArgs>>): Prisma__AccidentInfoClient<$Result.GetResult<Prisma.$AccidentInfoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AccidentInfos.
     * @param {AccidentInfoCreateManyArgs} args - Arguments to create many AccidentInfos.
     * @example
     * // Create many AccidentInfos
     * const accidentInfo = await prisma.accidentInfo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccidentInfoCreateManyArgs>(args?: SelectSubset<T, AccidentInfoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AccidentInfos and returns the data saved in the database.
     * @param {AccidentInfoCreateManyAndReturnArgs} args - Arguments to create many AccidentInfos.
     * @example
     * // Create many AccidentInfos
     * const accidentInfo = await prisma.accidentInfo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AccidentInfos and only return the `id`
     * const accidentInfoWithIdOnly = await prisma.accidentInfo.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccidentInfoCreateManyAndReturnArgs>(args?: SelectSubset<T, AccidentInfoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccidentInfoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AccidentInfo.
     * @param {AccidentInfoDeleteArgs} args - Arguments to delete one AccidentInfo.
     * @example
     * // Delete one AccidentInfo
     * const AccidentInfo = await prisma.accidentInfo.delete({
     *   where: {
     *     // ... filter to delete one AccidentInfo
     *   }
     * })
     * 
     */
    delete<T extends AccidentInfoDeleteArgs>(args: SelectSubset<T, AccidentInfoDeleteArgs<ExtArgs>>): Prisma__AccidentInfoClient<$Result.GetResult<Prisma.$AccidentInfoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AccidentInfo.
     * @param {AccidentInfoUpdateArgs} args - Arguments to update one AccidentInfo.
     * @example
     * // Update one AccidentInfo
     * const accidentInfo = await prisma.accidentInfo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccidentInfoUpdateArgs>(args: SelectSubset<T, AccidentInfoUpdateArgs<ExtArgs>>): Prisma__AccidentInfoClient<$Result.GetResult<Prisma.$AccidentInfoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AccidentInfos.
     * @param {AccidentInfoDeleteManyArgs} args - Arguments to filter AccidentInfos to delete.
     * @example
     * // Delete a few AccidentInfos
     * const { count } = await prisma.accidentInfo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccidentInfoDeleteManyArgs>(args?: SelectSubset<T, AccidentInfoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AccidentInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccidentInfoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AccidentInfos
     * const accidentInfo = await prisma.accidentInfo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccidentInfoUpdateManyArgs>(args: SelectSubset<T, AccidentInfoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AccidentInfos and returns the data updated in the database.
     * @param {AccidentInfoUpdateManyAndReturnArgs} args - Arguments to update many AccidentInfos.
     * @example
     * // Update many AccidentInfos
     * const accidentInfo = await prisma.accidentInfo.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AccidentInfos and only return the `id`
     * const accidentInfoWithIdOnly = await prisma.accidentInfo.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AccidentInfoUpdateManyAndReturnArgs>(args: SelectSubset<T, AccidentInfoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccidentInfoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AccidentInfo.
     * @param {AccidentInfoUpsertArgs} args - Arguments to update or create a AccidentInfo.
     * @example
     * // Update or create a AccidentInfo
     * const accidentInfo = await prisma.accidentInfo.upsert({
     *   create: {
     *     // ... data to create a AccidentInfo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AccidentInfo we want to update
     *   }
     * })
     */
    upsert<T extends AccidentInfoUpsertArgs>(args: SelectSubset<T, AccidentInfoUpsertArgs<ExtArgs>>): Prisma__AccidentInfoClient<$Result.GetResult<Prisma.$AccidentInfoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AccidentInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccidentInfoCountArgs} args - Arguments to filter AccidentInfos to count.
     * @example
     * // Count the number of AccidentInfos
     * const count = await prisma.accidentInfo.count({
     *   where: {
     *     // ... the filter for the AccidentInfos we want to count
     *   }
     * })
    **/
    count<T extends AccidentInfoCountArgs>(
      args?: Subset<T, AccidentInfoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccidentInfoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AccidentInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccidentInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccidentInfoAggregateArgs>(args: Subset<T, AccidentInfoAggregateArgs>): Prisma.PrismaPromise<GetAccidentInfoAggregateType<T>>

    /**
     * Group by AccidentInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccidentInfoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccidentInfoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccidentInfoGroupByArgs['orderBy'] }
        : { orderBy?: AccidentInfoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccidentInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccidentInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AccidentInfo model
   */
  readonly fields: AccidentInfoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AccidentInfo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccidentInfoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    UserInfo<T extends UserInfoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserInfoDefaultArgs<ExtArgs>>): Prisma__UserInfoClient<$Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AccidentInfo model
   */
  interface AccidentInfoFieldRefs {
    readonly id: FieldRef<"AccidentInfo", 'String'>
    readonly user_id: FieldRef<"AccidentInfo", 'String'>
    readonly acci_place: FieldRef<"AccidentInfo", 'String'>
    readonly acci_date: FieldRef<"AccidentInfo", 'DateTime'>
    readonly acci_time: FieldRef<"AccidentInfo", 'DateTime'>
    readonly security_contact_date: FieldRef<"AccidentInfo", 'DateTime'>
    readonly police_contact_date: FieldRef<"AccidentInfo", 'DateTime'>
    readonly police_contact_time: FieldRef<"AccidentInfo", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AccidentInfo findUnique
   */
  export type AccidentInfoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccidentInfo
     */
    select?: AccidentInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccidentInfo
     */
    omit?: AccidentInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccidentInfoInclude<ExtArgs> | null
    /**
     * Filter, which AccidentInfo to fetch.
     */
    where: AccidentInfoWhereUniqueInput
  }

  /**
   * AccidentInfo findUniqueOrThrow
   */
  export type AccidentInfoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccidentInfo
     */
    select?: AccidentInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccidentInfo
     */
    omit?: AccidentInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccidentInfoInclude<ExtArgs> | null
    /**
     * Filter, which AccidentInfo to fetch.
     */
    where: AccidentInfoWhereUniqueInput
  }

  /**
   * AccidentInfo findFirst
   */
  export type AccidentInfoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccidentInfo
     */
    select?: AccidentInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccidentInfo
     */
    omit?: AccidentInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccidentInfoInclude<ExtArgs> | null
    /**
     * Filter, which AccidentInfo to fetch.
     */
    where?: AccidentInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccidentInfos to fetch.
     */
    orderBy?: AccidentInfoOrderByWithRelationInput | AccidentInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccidentInfos.
     */
    cursor?: AccidentInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccidentInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccidentInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccidentInfos.
     */
    distinct?: AccidentInfoScalarFieldEnum | AccidentInfoScalarFieldEnum[]
  }

  /**
   * AccidentInfo findFirstOrThrow
   */
  export type AccidentInfoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccidentInfo
     */
    select?: AccidentInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccidentInfo
     */
    omit?: AccidentInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccidentInfoInclude<ExtArgs> | null
    /**
     * Filter, which AccidentInfo to fetch.
     */
    where?: AccidentInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccidentInfos to fetch.
     */
    orderBy?: AccidentInfoOrderByWithRelationInput | AccidentInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccidentInfos.
     */
    cursor?: AccidentInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccidentInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccidentInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccidentInfos.
     */
    distinct?: AccidentInfoScalarFieldEnum | AccidentInfoScalarFieldEnum[]
  }

  /**
   * AccidentInfo findMany
   */
  export type AccidentInfoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccidentInfo
     */
    select?: AccidentInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccidentInfo
     */
    omit?: AccidentInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccidentInfoInclude<ExtArgs> | null
    /**
     * Filter, which AccidentInfos to fetch.
     */
    where?: AccidentInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccidentInfos to fetch.
     */
    orderBy?: AccidentInfoOrderByWithRelationInput | AccidentInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AccidentInfos.
     */
    cursor?: AccidentInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccidentInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccidentInfos.
     */
    skip?: number
    distinct?: AccidentInfoScalarFieldEnum | AccidentInfoScalarFieldEnum[]
  }

  /**
   * AccidentInfo create
   */
  export type AccidentInfoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccidentInfo
     */
    select?: AccidentInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccidentInfo
     */
    omit?: AccidentInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccidentInfoInclude<ExtArgs> | null
    /**
     * The data needed to create a AccidentInfo.
     */
    data: XOR<AccidentInfoCreateInput, AccidentInfoUncheckedCreateInput>
  }

  /**
   * AccidentInfo createMany
   */
  export type AccidentInfoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AccidentInfos.
     */
    data: AccidentInfoCreateManyInput | AccidentInfoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AccidentInfo createManyAndReturn
   */
  export type AccidentInfoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccidentInfo
     */
    select?: AccidentInfoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AccidentInfo
     */
    omit?: AccidentInfoOmit<ExtArgs> | null
    /**
     * The data used to create many AccidentInfos.
     */
    data: AccidentInfoCreateManyInput | AccidentInfoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccidentInfoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AccidentInfo update
   */
  export type AccidentInfoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccidentInfo
     */
    select?: AccidentInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccidentInfo
     */
    omit?: AccidentInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccidentInfoInclude<ExtArgs> | null
    /**
     * The data needed to update a AccidentInfo.
     */
    data: XOR<AccidentInfoUpdateInput, AccidentInfoUncheckedUpdateInput>
    /**
     * Choose, which AccidentInfo to update.
     */
    where: AccidentInfoWhereUniqueInput
  }

  /**
   * AccidentInfo updateMany
   */
  export type AccidentInfoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AccidentInfos.
     */
    data: XOR<AccidentInfoUpdateManyMutationInput, AccidentInfoUncheckedUpdateManyInput>
    /**
     * Filter which AccidentInfos to update
     */
    where?: AccidentInfoWhereInput
    /**
     * Limit how many AccidentInfos to update.
     */
    limit?: number
  }

  /**
   * AccidentInfo updateManyAndReturn
   */
  export type AccidentInfoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccidentInfo
     */
    select?: AccidentInfoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AccidentInfo
     */
    omit?: AccidentInfoOmit<ExtArgs> | null
    /**
     * The data used to update AccidentInfos.
     */
    data: XOR<AccidentInfoUpdateManyMutationInput, AccidentInfoUncheckedUpdateManyInput>
    /**
     * Filter which AccidentInfos to update
     */
    where?: AccidentInfoWhereInput
    /**
     * Limit how many AccidentInfos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccidentInfoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AccidentInfo upsert
   */
  export type AccidentInfoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccidentInfo
     */
    select?: AccidentInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccidentInfo
     */
    omit?: AccidentInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccidentInfoInclude<ExtArgs> | null
    /**
     * The filter to search for the AccidentInfo to update in case it exists.
     */
    where: AccidentInfoWhereUniqueInput
    /**
     * In case the AccidentInfo found by the `where` argument doesn't exist, create a new AccidentInfo with this data.
     */
    create: XOR<AccidentInfoCreateInput, AccidentInfoUncheckedCreateInput>
    /**
     * In case the AccidentInfo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccidentInfoUpdateInput, AccidentInfoUncheckedUpdateInput>
  }

  /**
   * AccidentInfo delete
   */
  export type AccidentInfoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccidentInfo
     */
    select?: AccidentInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccidentInfo
     */
    omit?: AccidentInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccidentInfoInclude<ExtArgs> | null
    /**
     * Filter which AccidentInfo to delete.
     */
    where: AccidentInfoWhereUniqueInput
  }

  /**
   * AccidentInfo deleteMany
   */
  export type AccidentInfoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccidentInfos to delete
     */
    where?: AccidentInfoWhereInput
    /**
     * Limit how many AccidentInfos to delete.
     */
    limit?: number
  }

  /**
   * AccidentInfo without action
   */
  export type AccidentInfoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccidentInfo
     */
    select?: AccidentInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccidentInfo
     */
    omit?: AccidentInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccidentInfoInclude<ExtArgs> | null
  }


  /**
   * Model RequestPlaces
   */

  export type AggregateRequestPlaces = {
    _count: RequestPlacesCountAggregateOutputType | null
    _min: RequestPlacesMinAggregateOutputType | null
    _max: RequestPlacesMaxAggregateOutputType | null
  }

  export type RequestPlacesMinAggregateOutputType = {
    id: string | null
    user_id: string | null
    request_place: string | null
  }

  export type RequestPlacesMaxAggregateOutputType = {
    id: string | null
    user_id: string | null
    request_place: string | null
  }

  export type RequestPlacesCountAggregateOutputType = {
    id: number
    user_id: number
    request_place: number
    _all: number
  }


  export type RequestPlacesMinAggregateInputType = {
    id?: true
    user_id?: true
    request_place?: true
  }

  export type RequestPlacesMaxAggregateInputType = {
    id?: true
    user_id?: true
    request_place?: true
  }

  export type RequestPlacesCountAggregateInputType = {
    id?: true
    user_id?: true
    request_place?: true
    _all?: true
  }

  export type RequestPlacesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RequestPlaces to aggregate.
     */
    where?: RequestPlacesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestPlaces to fetch.
     */
    orderBy?: RequestPlacesOrderByWithRelationInput | RequestPlacesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RequestPlacesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestPlaces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestPlaces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RequestPlaces
    **/
    _count?: true | RequestPlacesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RequestPlacesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RequestPlacesMaxAggregateInputType
  }

  export type GetRequestPlacesAggregateType<T extends RequestPlacesAggregateArgs> = {
        [P in keyof T & keyof AggregateRequestPlaces]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRequestPlaces[P]>
      : GetScalarType<T[P], AggregateRequestPlaces[P]>
  }




  export type RequestPlacesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RequestPlacesWhereInput
    orderBy?: RequestPlacesOrderByWithAggregationInput | RequestPlacesOrderByWithAggregationInput[]
    by: RequestPlacesScalarFieldEnum[] | RequestPlacesScalarFieldEnum
    having?: RequestPlacesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RequestPlacesCountAggregateInputType | true
    _min?: RequestPlacesMinAggregateInputType
    _max?: RequestPlacesMaxAggregateInputType
  }

  export type RequestPlacesGroupByOutputType = {
    id: string
    user_id: string
    request_place: string
    _count: RequestPlacesCountAggregateOutputType | null
    _min: RequestPlacesMinAggregateOutputType | null
    _max: RequestPlacesMaxAggregateOutputType | null
  }

  type GetRequestPlacesGroupByPayload<T extends RequestPlacesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RequestPlacesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RequestPlacesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RequestPlacesGroupByOutputType[P]>
            : GetScalarType<T[P], RequestPlacesGroupByOutputType[P]>
        }
      >
    >


  export type RequestPlacesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    request_place?: boolean
    UserInfo?: boolean | UserInfoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["requestPlaces"]>

  export type RequestPlacesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    request_place?: boolean
    UserInfo?: boolean | UserInfoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["requestPlaces"]>

  export type RequestPlacesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    request_place?: boolean
    UserInfo?: boolean | UserInfoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["requestPlaces"]>

  export type RequestPlacesSelectScalar = {
    id?: boolean
    user_id?: boolean
    request_place?: boolean
  }

  export type RequestPlacesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "request_place", ExtArgs["result"]["requestPlaces"]>
  export type RequestPlacesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    UserInfo?: boolean | UserInfoDefaultArgs<ExtArgs>
  }
  export type RequestPlacesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    UserInfo?: boolean | UserInfoDefaultArgs<ExtArgs>
  }
  export type RequestPlacesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    UserInfo?: boolean | UserInfoDefaultArgs<ExtArgs>
  }

  export type $RequestPlacesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RequestPlaces"
    objects: {
      UserInfo: Prisma.$UserInfoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      user_id: string
      request_place: string
    }, ExtArgs["result"]["requestPlaces"]>
    composites: {}
  }

  type RequestPlacesGetPayload<S extends boolean | null | undefined | RequestPlacesDefaultArgs> = $Result.GetResult<Prisma.$RequestPlacesPayload, S>

  type RequestPlacesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RequestPlacesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RequestPlacesCountAggregateInputType | true
    }

  export interface RequestPlacesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RequestPlaces'], meta: { name: 'RequestPlaces' } }
    /**
     * Find zero or one RequestPlaces that matches the filter.
     * @param {RequestPlacesFindUniqueArgs} args - Arguments to find a RequestPlaces
     * @example
     * // Get one RequestPlaces
     * const requestPlaces = await prisma.requestPlaces.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RequestPlacesFindUniqueArgs>(args: SelectSubset<T, RequestPlacesFindUniqueArgs<ExtArgs>>): Prisma__RequestPlacesClient<$Result.GetResult<Prisma.$RequestPlacesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RequestPlaces that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RequestPlacesFindUniqueOrThrowArgs} args - Arguments to find a RequestPlaces
     * @example
     * // Get one RequestPlaces
     * const requestPlaces = await prisma.requestPlaces.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RequestPlacesFindUniqueOrThrowArgs>(args: SelectSubset<T, RequestPlacesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RequestPlacesClient<$Result.GetResult<Prisma.$RequestPlacesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RequestPlaces that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestPlacesFindFirstArgs} args - Arguments to find a RequestPlaces
     * @example
     * // Get one RequestPlaces
     * const requestPlaces = await prisma.requestPlaces.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RequestPlacesFindFirstArgs>(args?: SelectSubset<T, RequestPlacesFindFirstArgs<ExtArgs>>): Prisma__RequestPlacesClient<$Result.GetResult<Prisma.$RequestPlacesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RequestPlaces that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestPlacesFindFirstOrThrowArgs} args - Arguments to find a RequestPlaces
     * @example
     * // Get one RequestPlaces
     * const requestPlaces = await prisma.requestPlaces.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RequestPlacesFindFirstOrThrowArgs>(args?: SelectSubset<T, RequestPlacesFindFirstOrThrowArgs<ExtArgs>>): Prisma__RequestPlacesClient<$Result.GetResult<Prisma.$RequestPlacesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RequestPlaces that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestPlacesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RequestPlaces
     * const requestPlaces = await prisma.requestPlaces.findMany()
     * 
     * // Get first 10 RequestPlaces
     * const requestPlaces = await prisma.requestPlaces.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const requestPlacesWithIdOnly = await prisma.requestPlaces.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RequestPlacesFindManyArgs>(args?: SelectSubset<T, RequestPlacesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestPlacesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RequestPlaces.
     * @param {RequestPlacesCreateArgs} args - Arguments to create a RequestPlaces.
     * @example
     * // Create one RequestPlaces
     * const RequestPlaces = await prisma.requestPlaces.create({
     *   data: {
     *     // ... data to create a RequestPlaces
     *   }
     * })
     * 
     */
    create<T extends RequestPlacesCreateArgs>(args: SelectSubset<T, RequestPlacesCreateArgs<ExtArgs>>): Prisma__RequestPlacesClient<$Result.GetResult<Prisma.$RequestPlacesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RequestPlaces.
     * @param {RequestPlacesCreateManyArgs} args - Arguments to create many RequestPlaces.
     * @example
     * // Create many RequestPlaces
     * const requestPlaces = await prisma.requestPlaces.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RequestPlacesCreateManyArgs>(args?: SelectSubset<T, RequestPlacesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RequestPlaces and returns the data saved in the database.
     * @param {RequestPlacesCreateManyAndReturnArgs} args - Arguments to create many RequestPlaces.
     * @example
     * // Create many RequestPlaces
     * const requestPlaces = await prisma.requestPlaces.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RequestPlaces and only return the `id`
     * const requestPlacesWithIdOnly = await prisma.requestPlaces.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RequestPlacesCreateManyAndReturnArgs>(args?: SelectSubset<T, RequestPlacesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestPlacesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RequestPlaces.
     * @param {RequestPlacesDeleteArgs} args - Arguments to delete one RequestPlaces.
     * @example
     * // Delete one RequestPlaces
     * const RequestPlaces = await prisma.requestPlaces.delete({
     *   where: {
     *     // ... filter to delete one RequestPlaces
     *   }
     * })
     * 
     */
    delete<T extends RequestPlacesDeleteArgs>(args: SelectSubset<T, RequestPlacesDeleteArgs<ExtArgs>>): Prisma__RequestPlacesClient<$Result.GetResult<Prisma.$RequestPlacesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RequestPlaces.
     * @param {RequestPlacesUpdateArgs} args - Arguments to update one RequestPlaces.
     * @example
     * // Update one RequestPlaces
     * const requestPlaces = await prisma.requestPlaces.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RequestPlacesUpdateArgs>(args: SelectSubset<T, RequestPlacesUpdateArgs<ExtArgs>>): Prisma__RequestPlacesClient<$Result.GetResult<Prisma.$RequestPlacesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RequestPlaces.
     * @param {RequestPlacesDeleteManyArgs} args - Arguments to filter RequestPlaces to delete.
     * @example
     * // Delete a few RequestPlaces
     * const { count } = await prisma.requestPlaces.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RequestPlacesDeleteManyArgs>(args?: SelectSubset<T, RequestPlacesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RequestPlaces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestPlacesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RequestPlaces
     * const requestPlaces = await prisma.requestPlaces.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RequestPlacesUpdateManyArgs>(args: SelectSubset<T, RequestPlacesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RequestPlaces and returns the data updated in the database.
     * @param {RequestPlacesUpdateManyAndReturnArgs} args - Arguments to update many RequestPlaces.
     * @example
     * // Update many RequestPlaces
     * const requestPlaces = await prisma.requestPlaces.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RequestPlaces and only return the `id`
     * const requestPlacesWithIdOnly = await prisma.requestPlaces.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RequestPlacesUpdateManyAndReturnArgs>(args: SelectSubset<T, RequestPlacesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestPlacesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RequestPlaces.
     * @param {RequestPlacesUpsertArgs} args - Arguments to update or create a RequestPlaces.
     * @example
     * // Update or create a RequestPlaces
     * const requestPlaces = await prisma.requestPlaces.upsert({
     *   create: {
     *     // ... data to create a RequestPlaces
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RequestPlaces we want to update
     *   }
     * })
     */
    upsert<T extends RequestPlacesUpsertArgs>(args: SelectSubset<T, RequestPlacesUpsertArgs<ExtArgs>>): Prisma__RequestPlacesClient<$Result.GetResult<Prisma.$RequestPlacesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RequestPlaces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestPlacesCountArgs} args - Arguments to filter RequestPlaces to count.
     * @example
     * // Count the number of RequestPlaces
     * const count = await prisma.requestPlaces.count({
     *   where: {
     *     // ... the filter for the RequestPlaces we want to count
     *   }
     * })
    **/
    count<T extends RequestPlacesCountArgs>(
      args?: Subset<T, RequestPlacesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RequestPlacesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RequestPlaces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestPlacesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RequestPlacesAggregateArgs>(args: Subset<T, RequestPlacesAggregateArgs>): Prisma.PrismaPromise<GetRequestPlacesAggregateType<T>>

    /**
     * Group by RequestPlaces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestPlacesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RequestPlacesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RequestPlacesGroupByArgs['orderBy'] }
        : { orderBy?: RequestPlacesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RequestPlacesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRequestPlacesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RequestPlaces model
   */
  readonly fields: RequestPlacesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RequestPlaces.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RequestPlacesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    UserInfo<T extends UserInfoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserInfoDefaultArgs<ExtArgs>>): Prisma__UserInfoClient<$Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RequestPlaces model
   */
  interface RequestPlacesFieldRefs {
    readonly id: FieldRef<"RequestPlaces", 'String'>
    readonly user_id: FieldRef<"RequestPlaces", 'String'>
    readonly request_place: FieldRef<"RequestPlaces", 'String'>
  }
    

  // Custom InputTypes
  /**
   * RequestPlaces findUnique
   */
  export type RequestPlacesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestPlaces
     */
    select?: RequestPlacesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestPlaces
     */
    omit?: RequestPlacesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestPlacesInclude<ExtArgs> | null
    /**
     * Filter, which RequestPlaces to fetch.
     */
    where: RequestPlacesWhereUniqueInput
  }

  /**
   * RequestPlaces findUniqueOrThrow
   */
  export type RequestPlacesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestPlaces
     */
    select?: RequestPlacesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestPlaces
     */
    omit?: RequestPlacesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestPlacesInclude<ExtArgs> | null
    /**
     * Filter, which RequestPlaces to fetch.
     */
    where: RequestPlacesWhereUniqueInput
  }

  /**
   * RequestPlaces findFirst
   */
  export type RequestPlacesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestPlaces
     */
    select?: RequestPlacesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestPlaces
     */
    omit?: RequestPlacesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestPlacesInclude<ExtArgs> | null
    /**
     * Filter, which RequestPlaces to fetch.
     */
    where?: RequestPlacesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestPlaces to fetch.
     */
    orderBy?: RequestPlacesOrderByWithRelationInput | RequestPlacesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RequestPlaces.
     */
    cursor?: RequestPlacesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestPlaces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestPlaces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RequestPlaces.
     */
    distinct?: RequestPlacesScalarFieldEnum | RequestPlacesScalarFieldEnum[]
  }

  /**
   * RequestPlaces findFirstOrThrow
   */
  export type RequestPlacesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestPlaces
     */
    select?: RequestPlacesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestPlaces
     */
    omit?: RequestPlacesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestPlacesInclude<ExtArgs> | null
    /**
     * Filter, which RequestPlaces to fetch.
     */
    where?: RequestPlacesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestPlaces to fetch.
     */
    orderBy?: RequestPlacesOrderByWithRelationInput | RequestPlacesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RequestPlaces.
     */
    cursor?: RequestPlacesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestPlaces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestPlaces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RequestPlaces.
     */
    distinct?: RequestPlacesScalarFieldEnum | RequestPlacesScalarFieldEnum[]
  }

  /**
   * RequestPlaces findMany
   */
  export type RequestPlacesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestPlaces
     */
    select?: RequestPlacesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestPlaces
     */
    omit?: RequestPlacesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestPlacesInclude<ExtArgs> | null
    /**
     * Filter, which RequestPlaces to fetch.
     */
    where?: RequestPlacesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestPlaces to fetch.
     */
    orderBy?: RequestPlacesOrderByWithRelationInput | RequestPlacesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RequestPlaces.
     */
    cursor?: RequestPlacesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestPlaces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestPlaces.
     */
    skip?: number
    distinct?: RequestPlacesScalarFieldEnum | RequestPlacesScalarFieldEnum[]
  }

  /**
   * RequestPlaces create
   */
  export type RequestPlacesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestPlaces
     */
    select?: RequestPlacesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestPlaces
     */
    omit?: RequestPlacesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestPlacesInclude<ExtArgs> | null
    /**
     * The data needed to create a RequestPlaces.
     */
    data: XOR<RequestPlacesCreateInput, RequestPlacesUncheckedCreateInput>
  }

  /**
   * RequestPlaces createMany
   */
  export type RequestPlacesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RequestPlaces.
     */
    data: RequestPlacesCreateManyInput | RequestPlacesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RequestPlaces createManyAndReturn
   */
  export type RequestPlacesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestPlaces
     */
    select?: RequestPlacesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RequestPlaces
     */
    omit?: RequestPlacesOmit<ExtArgs> | null
    /**
     * The data used to create many RequestPlaces.
     */
    data: RequestPlacesCreateManyInput | RequestPlacesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestPlacesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RequestPlaces update
   */
  export type RequestPlacesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestPlaces
     */
    select?: RequestPlacesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestPlaces
     */
    omit?: RequestPlacesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestPlacesInclude<ExtArgs> | null
    /**
     * The data needed to update a RequestPlaces.
     */
    data: XOR<RequestPlacesUpdateInput, RequestPlacesUncheckedUpdateInput>
    /**
     * Choose, which RequestPlaces to update.
     */
    where: RequestPlacesWhereUniqueInput
  }

  /**
   * RequestPlaces updateMany
   */
  export type RequestPlacesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RequestPlaces.
     */
    data: XOR<RequestPlacesUpdateManyMutationInput, RequestPlacesUncheckedUpdateManyInput>
    /**
     * Filter which RequestPlaces to update
     */
    where?: RequestPlacesWhereInput
    /**
     * Limit how many RequestPlaces to update.
     */
    limit?: number
  }

  /**
   * RequestPlaces updateManyAndReturn
   */
  export type RequestPlacesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestPlaces
     */
    select?: RequestPlacesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RequestPlaces
     */
    omit?: RequestPlacesOmit<ExtArgs> | null
    /**
     * The data used to update RequestPlaces.
     */
    data: XOR<RequestPlacesUpdateManyMutationInput, RequestPlacesUncheckedUpdateManyInput>
    /**
     * Filter which RequestPlaces to update
     */
    where?: RequestPlacesWhereInput
    /**
     * Limit how many RequestPlaces to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestPlacesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RequestPlaces upsert
   */
  export type RequestPlacesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestPlaces
     */
    select?: RequestPlacesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestPlaces
     */
    omit?: RequestPlacesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestPlacesInclude<ExtArgs> | null
    /**
     * The filter to search for the RequestPlaces to update in case it exists.
     */
    where: RequestPlacesWhereUniqueInput
    /**
     * In case the RequestPlaces found by the `where` argument doesn't exist, create a new RequestPlaces with this data.
     */
    create: XOR<RequestPlacesCreateInput, RequestPlacesUncheckedCreateInput>
    /**
     * In case the RequestPlaces was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RequestPlacesUpdateInput, RequestPlacesUncheckedUpdateInput>
  }

  /**
   * RequestPlaces delete
   */
  export type RequestPlacesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestPlaces
     */
    select?: RequestPlacesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestPlaces
     */
    omit?: RequestPlacesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestPlacesInclude<ExtArgs> | null
    /**
     * Filter which RequestPlaces to delete.
     */
    where: RequestPlacesWhereUniqueInput
  }

  /**
   * RequestPlaces deleteMany
   */
  export type RequestPlacesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RequestPlaces to delete
     */
    where?: RequestPlacesWhereInput
    /**
     * Limit how many RequestPlaces to delete.
     */
    limit?: number
  }

  /**
   * RequestPlaces without action
   */
  export type RequestPlacesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestPlaces
     */
    select?: RequestPlacesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestPlaces
     */
    omit?: RequestPlacesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestPlacesInclude<ExtArgs> | null
  }


  /**
   * Model UserInfo
   */

  export type AggregateUserInfo = {
    _count: UserInfoCountAggregateOutputType | null
    _avg: UserInfoAvgAggregateOutputType | null
    _sum: UserInfoSumAggregateOutputType | null
    _min: UserInfoMinAggregateOutputType | null
    _max: UserInfoMaxAggregateOutputType | null
  }

  export type UserInfoAvgAggregateOutputType = {
    user_age: Decimal | null
  }

  export type UserInfoSumAggregateOutputType = {
    user_age: Decimal | null
  }

  export type UserInfoMinAggregateOutputType = {
    id: string | null
    created_at: Date | null
    user_name: string | null
    user_age: Decimal | null
    user_address: string | null
    user_phone: string | null
    user_occupation: string | null
    user_cardid: string | null
    user_reason: string | null
  }

  export type UserInfoMaxAggregateOutputType = {
    id: string | null
    created_at: Date | null
    user_name: string | null
    user_age: Decimal | null
    user_address: string | null
    user_phone: string | null
    user_occupation: string | null
    user_cardid: string | null
    user_reason: string | null
  }

  export type UserInfoCountAggregateOutputType = {
    id: number
    created_at: number
    user_name: number
    user_age: number
    user_address: number
    user_phone: number
    user_occupation: number
    user_cardid: number
    user_reason: number
    _all: number
  }


  export type UserInfoAvgAggregateInputType = {
    user_age?: true
  }

  export type UserInfoSumAggregateInputType = {
    user_age?: true
  }

  export type UserInfoMinAggregateInputType = {
    id?: true
    created_at?: true
    user_name?: true
    user_age?: true
    user_address?: true
    user_phone?: true
    user_occupation?: true
    user_cardid?: true
    user_reason?: true
  }

  export type UserInfoMaxAggregateInputType = {
    id?: true
    created_at?: true
    user_name?: true
    user_age?: true
    user_address?: true
    user_phone?: true
    user_occupation?: true
    user_cardid?: true
    user_reason?: true
  }

  export type UserInfoCountAggregateInputType = {
    id?: true
    created_at?: true
    user_name?: true
    user_age?: true
    user_address?: true
    user_phone?: true
    user_occupation?: true
    user_cardid?: true
    user_reason?: true
    _all?: true
  }

  export type UserInfoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserInfo to aggregate.
     */
    where?: UserInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserInfos to fetch.
     */
    orderBy?: UserInfoOrderByWithRelationInput | UserInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserInfos
    **/
    _count?: true | UserInfoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserInfoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserInfoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserInfoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserInfoMaxAggregateInputType
  }

  export type GetUserInfoAggregateType<T extends UserInfoAggregateArgs> = {
        [P in keyof T & keyof AggregateUserInfo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserInfo[P]>
      : GetScalarType<T[P], AggregateUserInfo[P]>
  }




  export type UserInfoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserInfoWhereInput
    orderBy?: UserInfoOrderByWithAggregationInput | UserInfoOrderByWithAggregationInput[]
    by: UserInfoScalarFieldEnum[] | UserInfoScalarFieldEnum
    having?: UserInfoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserInfoCountAggregateInputType | true
    _avg?: UserInfoAvgAggregateInputType
    _sum?: UserInfoSumAggregateInputType
    _min?: UserInfoMinAggregateInputType
    _max?: UserInfoMaxAggregateInputType
  }

  export type UserInfoGroupByOutputType = {
    id: string
    created_at: Date
    user_name: string
    user_age: Decimal
    user_address: string
    user_phone: string
    user_occupation: string
    user_cardid: string
    user_reason: string
    _count: UserInfoCountAggregateOutputType | null
    _avg: UserInfoAvgAggregateOutputType | null
    _sum: UserInfoSumAggregateOutputType | null
    _min: UserInfoMinAggregateOutputType | null
    _max: UserInfoMaxAggregateOutputType | null
  }

  type GetUserInfoGroupByPayload<T extends UserInfoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserInfoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserInfoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserInfoGroupByOutputType[P]>
            : GetScalarType<T[P], UserInfoGroupByOutputType[P]>
        }
      >
    >


  export type UserInfoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    user_name?: boolean
    user_age?: boolean
    user_address?: boolean
    user_phone?: boolean
    user_occupation?: boolean
    user_cardid?: boolean
    user_reason?: boolean
    AccidentInfo?: boolean | UserInfo$AccidentInfoArgs<ExtArgs>
    RequestPlaces?: boolean | UserInfo$RequestPlacesArgs<ExtArgs>
    _count?: boolean | UserInfoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userInfo"]>

  export type UserInfoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    user_name?: boolean
    user_age?: boolean
    user_address?: boolean
    user_phone?: boolean
    user_occupation?: boolean
    user_cardid?: boolean
    user_reason?: boolean
  }, ExtArgs["result"]["userInfo"]>

  export type UserInfoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    user_name?: boolean
    user_age?: boolean
    user_address?: boolean
    user_phone?: boolean
    user_occupation?: boolean
    user_cardid?: boolean
    user_reason?: boolean
  }, ExtArgs["result"]["userInfo"]>

  export type UserInfoSelectScalar = {
    id?: boolean
    created_at?: boolean
    user_name?: boolean
    user_age?: boolean
    user_address?: boolean
    user_phone?: boolean
    user_occupation?: boolean
    user_cardid?: boolean
    user_reason?: boolean
  }

  export type UserInfoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "created_at" | "user_name" | "user_age" | "user_address" | "user_phone" | "user_occupation" | "user_cardid" | "user_reason", ExtArgs["result"]["userInfo"]>
  export type UserInfoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    AccidentInfo?: boolean | UserInfo$AccidentInfoArgs<ExtArgs>
    RequestPlaces?: boolean | UserInfo$RequestPlacesArgs<ExtArgs>
    _count?: boolean | UserInfoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserInfoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserInfoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserInfoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserInfo"
    objects: {
      AccidentInfo: Prisma.$AccidentInfoPayload<ExtArgs>[]
      RequestPlaces: Prisma.$RequestPlacesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      created_at: Date
      user_name: string
      user_age: Prisma.Decimal
      user_address: string
      user_phone: string
      user_occupation: string
      user_cardid: string
      user_reason: string
    }, ExtArgs["result"]["userInfo"]>
    composites: {}
  }

  type UserInfoGetPayload<S extends boolean | null | undefined | UserInfoDefaultArgs> = $Result.GetResult<Prisma.$UserInfoPayload, S>

  type UserInfoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserInfoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserInfoCountAggregateInputType | true
    }

  export interface UserInfoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserInfo'], meta: { name: 'UserInfo' } }
    /**
     * Find zero or one UserInfo that matches the filter.
     * @param {UserInfoFindUniqueArgs} args - Arguments to find a UserInfo
     * @example
     * // Get one UserInfo
     * const userInfo = await prisma.userInfo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserInfoFindUniqueArgs>(args: SelectSubset<T, UserInfoFindUniqueArgs<ExtArgs>>): Prisma__UserInfoClient<$Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserInfo that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserInfoFindUniqueOrThrowArgs} args - Arguments to find a UserInfo
     * @example
     * // Get one UserInfo
     * const userInfo = await prisma.userInfo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserInfoFindUniqueOrThrowArgs>(args: SelectSubset<T, UserInfoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserInfoClient<$Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserInfo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInfoFindFirstArgs} args - Arguments to find a UserInfo
     * @example
     * // Get one UserInfo
     * const userInfo = await prisma.userInfo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserInfoFindFirstArgs>(args?: SelectSubset<T, UserInfoFindFirstArgs<ExtArgs>>): Prisma__UserInfoClient<$Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserInfo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInfoFindFirstOrThrowArgs} args - Arguments to find a UserInfo
     * @example
     * // Get one UserInfo
     * const userInfo = await prisma.userInfo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserInfoFindFirstOrThrowArgs>(args?: SelectSubset<T, UserInfoFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserInfoClient<$Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserInfos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInfoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserInfos
     * const userInfos = await prisma.userInfo.findMany()
     * 
     * // Get first 10 UserInfos
     * const userInfos = await prisma.userInfo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userInfoWithIdOnly = await prisma.userInfo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserInfoFindManyArgs>(args?: SelectSubset<T, UserInfoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserInfo.
     * @param {UserInfoCreateArgs} args - Arguments to create a UserInfo.
     * @example
     * // Create one UserInfo
     * const UserInfo = await prisma.userInfo.create({
     *   data: {
     *     // ... data to create a UserInfo
     *   }
     * })
     * 
     */
    create<T extends UserInfoCreateArgs>(args: SelectSubset<T, UserInfoCreateArgs<ExtArgs>>): Prisma__UserInfoClient<$Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserInfos.
     * @param {UserInfoCreateManyArgs} args - Arguments to create many UserInfos.
     * @example
     * // Create many UserInfos
     * const userInfo = await prisma.userInfo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserInfoCreateManyArgs>(args?: SelectSubset<T, UserInfoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserInfos and returns the data saved in the database.
     * @param {UserInfoCreateManyAndReturnArgs} args - Arguments to create many UserInfos.
     * @example
     * // Create many UserInfos
     * const userInfo = await prisma.userInfo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserInfos and only return the `id`
     * const userInfoWithIdOnly = await prisma.userInfo.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserInfoCreateManyAndReturnArgs>(args?: SelectSubset<T, UserInfoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserInfo.
     * @param {UserInfoDeleteArgs} args - Arguments to delete one UserInfo.
     * @example
     * // Delete one UserInfo
     * const UserInfo = await prisma.userInfo.delete({
     *   where: {
     *     // ... filter to delete one UserInfo
     *   }
     * })
     * 
     */
    delete<T extends UserInfoDeleteArgs>(args: SelectSubset<T, UserInfoDeleteArgs<ExtArgs>>): Prisma__UserInfoClient<$Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserInfo.
     * @param {UserInfoUpdateArgs} args - Arguments to update one UserInfo.
     * @example
     * // Update one UserInfo
     * const userInfo = await prisma.userInfo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserInfoUpdateArgs>(args: SelectSubset<T, UserInfoUpdateArgs<ExtArgs>>): Prisma__UserInfoClient<$Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserInfos.
     * @param {UserInfoDeleteManyArgs} args - Arguments to filter UserInfos to delete.
     * @example
     * // Delete a few UserInfos
     * const { count } = await prisma.userInfo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserInfoDeleteManyArgs>(args?: SelectSubset<T, UserInfoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInfoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserInfos
     * const userInfo = await prisma.userInfo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserInfoUpdateManyArgs>(args: SelectSubset<T, UserInfoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserInfos and returns the data updated in the database.
     * @param {UserInfoUpdateManyAndReturnArgs} args - Arguments to update many UserInfos.
     * @example
     * // Update many UserInfos
     * const userInfo = await prisma.userInfo.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserInfos and only return the `id`
     * const userInfoWithIdOnly = await prisma.userInfo.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserInfoUpdateManyAndReturnArgs>(args: SelectSubset<T, UserInfoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserInfo.
     * @param {UserInfoUpsertArgs} args - Arguments to update or create a UserInfo.
     * @example
     * // Update or create a UserInfo
     * const userInfo = await prisma.userInfo.upsert({
     *   create: {
     *     // ... data to create a UserInfo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserInfo we want to update
     *   }
     * })
     */
    upsert<T extends UserInfoUpsertArgs>(args: SelectSubset<T, UserInfoUpsertArgs<ExtArgs>>): Prisma__UserInfoClient<$Result.GetResult<Prisma.$UserInfoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInfoCountArgs} args - Arguments to filter UserInfos to count.
     * @example
     * // Count the number of UserInfos
     * const count = await prisma.userInfo.count({
     *   where: {
     *     // ... the filter for the UserInfos we want to count
     *   }
     * })
    **/
    count<T extends UserInfoCountArgs>(
      args?: Subset<T, UserInfoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserInfoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserInfoAggregateArgs>(args: Subset<T, UserInfoAggregateArgs>): Prisma.PrismaPromise<GetUserInfoAggregateType<T>>

    /**
     * Group by UserInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInfoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserInfoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserInfoGroupByArgs['orderBy'] }
        : { orderBy?: UserInfoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserInfo model
   */
  readonly fields: UserInfoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserInfo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserInfoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    AccidentInfo<T extends UserInfo$AccidentInfoArgs<ExtArgs> = {}>(args?: Subset<T, UserInfo$AccidentInfoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccidentInfoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    RequestPlaces<T extends UserInfo$RequestPlacesArgs<ExtArgs> = {}>(args?: Subset<T, UserInfo$RequestPlacesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestPlacesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserInfo model
   */
  interface UserInfoFieldRefs {
    readonly id: FieldRef<"UserInfo", 'String'>
    readonly created_at: FieldRef<"UserInfo", 'DateTime'>
    readonly user_name: FieldRef<"UserInfo", 'String'>
    readonly user_age: FieldRef<"UserInfo", 'Decimal'>
    readonly user_address: FieldRef<"UserInfo", 'String'>
    readonly user_phone: FieldRef<"UserInfo", 'String'>
    readonly user_occupation: FieldRef<"UserInfo", 'String'>
    readonly user_cardid: FieldRef<"UserInfo", 'String'>
    readonly user_reason: FieldRef<"UserInfo", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserInfo findUnique
   */
  export type UserInfoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInfo
     */
    select?: UserInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserInfo
     */
    omit?: UserInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInfoInclude<ExtArgs> | null
    /**
     * Filter, which UserInfo to fetch.
     */
    where: UserInfoWhereUniqueInput
  }

  /**
   * UserInfo findUniqueOrThrow
   */
  export type UserInfoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInfo
     */
    select?: UserInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserInfo
     */
    omit?: UserInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInfoInclude<ExtArgs> | null
    /**
     * Filter, which UserInfo to fetch.
     */
    where: UserInfoWhereUniqueInput
  }

  /**
   * UserInfo findFirst
   */
  export type UserInfoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInfo
     */
    select?: UserInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserInfo
     */
    omit?: UserInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInfoInclude<ExtArgs> | null
    /**
     * Filter, which UserInfo to fetch.
     */
    where?: UserInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserInfos to fetch.
     */
    orderBy?: UserInfoOrderByWithRelationInput | UserInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserInfos.
     */
    cursor?: UserInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserInfos.
     */
    distinct?: UserInfoScalarFieldEnum | UserInfoScalarFieldEnum[]
  }

  /**
   * UserInfo findFirstOrThrow
   */
  export type UserInfoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInfo
     */
    select?: UserInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserInfo
     */
    omit?: UserInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInfoInclude<ExtArgs> | null
    /**
     * Filter, which UserInfo to fetch.
     */
    where?: UserInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserInfos to fetch.
     */
    orderBy?: UserInfoOrderByWithRelationInput | UserInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserInfos.
     */
    cursor?: UserInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserInfos.
     */
    distinct?: UserInfoScalarFieldEnum | UserInfoScalarFieldEnum[]
  }

  /**
   * UserInfo findMany
   */
  export type UserInfoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInfo
     */
    select?: UserInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserInfo
     */
    omit?: UserInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInfoInclude<ExtArgs> | null
    /**
     * Filter, which UserInfos to fetch.
     */
    where?: UserInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserInfos to fetch.
     */
    orderBy?: UserInfoOrderByWithRelationInput | UserInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserInfos.
     */
    cursor?: UserInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserInfos.
     */
    skip?: number
    distinct?: UserInfoScalarFieldEnum | UserInfoScalarFieldEnum[]
  }

  /**
   * UserInfo create
   */
  export type UserInfoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInfo
     */
    select?: UserInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserInfo
     */
    omit?: UserInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInfoInclude<ExtArgs> | null
    /**
     * The data needed to create a UserInfo.
     */
    data: XOR<UserInfoCreateInput, UserInfoUncheckedCreateInput>
  }

  /**
   * UserInfo createMany
   */
  export type UserInfoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserInfos.
     */
    data: UserInfoCreateManyInput | UserInfoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserInfo createManyAndReturn
   */
  export type UserInfoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInfo
     */
    select?: UserInfoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserInfo
     */
    omit?: UserInfoOmit<ExtArgs> | null
    /**
     * The data used to create many UserInfos.
     */
    data: UserInfoCreateManyInput | UserInfoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserInfo update
   */
  export type UserInfoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInfo
     */
    select?: UserInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserInfo
     */
    omit?: UserInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInfoInclude<ExtArgs> | null
    /**
     * The data needed to update a UserInfo.
     */
    data: XOR<UserInfoUpdateInput, UserInfoUncheckedUpdateInput>
    /**
     * Choose, which UserInfo to update.
     */
    where: UserInfoWhereUniqueInput
  }

  /**
   * UserInfo updateMany
   */
  export type UserInfoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserInfos.
     */
    data: XOR<UserInfoUpdateManyMutationInput, UserInfoUncheckedUpdateManyInput>
    /**
     * Filter which UserInfos to update
     */
    where?: UserInfoWhereInput
    /**
     * Limit how many UserInfos to update.
     */
    limit?: number
  }

  /**
   * UserInfo updateManyAndReturn
   */
  export type UserInfoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInfo
     */
    select?: UserInfoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserInfo
     */
    omit?: UserInfoOmit<ExtArgs> | null
    /**
     * The data used to update UserInfos.
     */
    data: XOR<UserInfoUpdateManyMutationInput, UserInfoUncheckedUpdateManyInput>
    /**
     * Filter which UserInfos to update
     */
    where?: UserInfoWhereInput
    /**
     * Limit how many UserInfos to update.
     */
    limit?: number
  }

  /**
   * UserInfo upsert
   */
  export type UserInfoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInfo
     */
    select?: UserInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserInfo
     */
    omit?: UserInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInfoInclude<ExtArgs> | null
    /**
     * The filter to search for the UserInfo to update in case it exists.
     */
    where: UserInfoWhereUniqueInput
    /**
     * In case the UserInfo found by the `where` argument doesn't exist, create a new UserInfo with this data.
     */
    create: XOR<UserInfoCreateInput, UserInfoUncheckedCreateInput>
    /**
     * In case the UserInfo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserInfoUpdateInput, UserInfoUncheckedUpdateInput>
  }

  /**
   * UserInfo delete
   */
  export type UserInfoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInfo
     */
    select?: UserInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserInfo
     */
    omit?: UserInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInfoInclude<ExtArgs> | null
    /**
     * Filter which UserInfo to delete.
     */
    where: UserInfoWhereUniqueInput
  }

  /**
   * UserInfo deleteMany
   */
  export type UserInfoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserInfos to delete
     */
    where?: UserInfoWhereInput
    /**
     * Limit how many UserInfos to delete.
     */
    limit?: number
  }

  /**
   * UserInfo.AccidentInfo
   */
  export type UserInfo$AccidentInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccidentInfo
     */
    select?: AccidentInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccidentInfo
     */
    omit?: AccidentInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccidentInfoInclude<ExtArgs> | null
    where?: AccidentInfoWhereInput
    orderBy?: AccidentInfoOrderByWithRelationInput | AccidentInfoOrderByWithRelationInput[]
    cursor?: AccidentInfoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccidentInfoScalarFieldEnum | AccidentInfoScalarFieldEnum[]
  }

  /**
   * UserInfo.RequestPlaces
   */
  export type UserInfo$RequestPlacesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestPlaces
     */
    select?: RequestPlacesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestPlaces
     */
    omit?: RequestPlacesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestPlacesInclude<ExtArgs> | null
    where?: RequestPlacesWhereInput
    orderBy?: RequestPlacesOrderByWithRelationInput | RequestPlacesOrderByWithRelationInput[]
    cursor?: RequestPlacesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RequestPlacesScalarFieldEnum | RequestPlacesScalarFieldEnum[]
  }

  /**
   * UserInfo without action
   */
  export type UserInfoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInfo
     */
    select?: UserInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserInfo
     */
    omit?: UserInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInfoInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AccidentInfoScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    acci_place: 'acci_place',
    acci_date: 'acci_date',
    acci_time: 'acci_time',
    security_contact_date: 'security_contact_date',
    police_contact_date: 'police_contact_date',
    police_contact_time: 'police_contact_time'
  };

  export type AccidentInfoScalarFieldEnum = (typeof AccidentInfoScalarFieldEnum)[keyof typeof AccidentInfoScalarFieldEnum]


  export const RequestPlacesScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    request_place: 'request_place'
  };

  export type RequestPlacesScalarFieldEnum = (typeof RequestPlacesScalarFieldEnum)[keyof typeof RequestPlacesScalarFieldEnum]


  export const UserInfoScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    user_name: 'user_name',
    user_age: 'user_age',
    user_address: 'user_address',
    user_phone: 'user_phone',
    user_occupation: 'user_occupation',
    user_cardid: 'user_cardid',
    user_reason: 'user_reason'
  };

  export type UserInfoScalarFieldEnum = (typeof UserInfoScalarFieldEnum)[keyof typeof UserInfoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type AccidentInfoWhereInput = {
    AND?: AccidentInfoWhereInput | AccidentInfoWhereInput[]
    OR?: AccidentInfoWhereInput[]
    NOT?: AccidentInfoWhereInput | AccidentInfoWhereInput[]
    id?: UuidFilter<"AccidentInfo"> | string
    user_id?: UuidFilter<"AccidentInfo"> | string
    acci_place?: StringFilter<"AccidentInfo"> | string
    acci_date?: DateTimeFilter<"AccidentInfo"> | Date | string
    acci_time?: DateTimeFilter<"AccidentInfo"> | Date | string
    security_contact_date?: DateTimeFilter<"AccidentInfo"> | Date | string
    police_contact_date?: DateTimeFilter<"AccidentInfo"> | Date | string
    police_contact_time?: DateTimeFilter<"AccidentInfo"> | Date | string
    UserInfo?: XOR<UserInfoScalarRelationFilter, UserInfoWhereInput>
  }

  export type AccidentInfoOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    acci_place?: SortOrder
    acci_date?: SortOrder
    acci_time?: SortOrder
    security_contact_date?: SortOrder
    police_contact_date?: SortOrder
    police_contact_time?: SortOrder
    UserInfo?: UserInfoOrderByWithRelationInput
  }

  export type AccidentInfoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AccidentInfoWhereInput | AccidentInfoWhereInput[]
    OR?: AccidentInfoWhereInput[]
    NOT?: AccidentInfoWhereInput | AccidentInfoWhereInput[]
    user_id?: UuidFilter<"AccidentInfo"> | string
    acci_place?: StringFilter<"AccidentInfo"> | string
    acci_date?: DateTimeFilter<"AccidentInfo"> | Date | string
    acci_time?: DateTimeFilter<"AccidentInfo"> | Date | string
    security_contact_date?: DateTimeFilter<"AccidentInfo"> | Date | string
    police_contact_date?: DateTimeFilter<"AccidentInfo"> | Date | string
    police_contact_time?: DateTimeFilter<"AccidentInfo"> | Date | string
    UserInfo?: XOR<UserInfoScalarRelationFilter, UserInfoWhereInput>
  }, "id">

  export type AccidentInfoOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    acci_place?: SortOrder
    acci_date?: SortOrder
    acci_time?: SortOrder
    security_contact_date?: SortOrder
    police_contact_date?: SortOrder
    police_contact_time?: SortOrder
    _count?: AccidentInfoCountOrderByAggregateInput
    _max?: AccidentInfoMaxOrderByAggregateInput
    _min?: AccidentInfoMinOrderByAggregateInput
  }

  export type AccidentInfoScalarWhereWithAggregatesInput = {
    AND?: AccidentInfoScalarWhereWithAggregatesInput | AccidentInfoScalarWhereWithAggregatesInput[]
    OR?: AccidentInfoScalarWhereWithAggregatesInput[]
    NOT?: AccidentInfoScalarWhereWithAggregatesInput | AccidentInfoScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"AccidentInfo"> | string
    user_id?: UuidWithAggregatesFilter<"AccidentInfo"> | string
    acci_place?: StringWithAggregatesFilter<"AccidentInfo"> | string
    acci_date?: DateTimeWithAggregatesFilter<"AccidentInfo"> | Date | string
    acci_time?: DateTimeWithAggregatesFilter<"AccidentInfo"> | Date | string
    security_contact_date?: DateTimeWithAggregatesFilter<"AccidentInfo"> | Date | string
    police_contact_date?: DateTimeWithAggregatesFilter<"AccidentInfo"> | Date | string
    police_contact_time?: DateTimeWithAggregatesFilter<"AccidentInfo"> | Date | string
  }

  export type RequestPlacesWhereInput = {
    AND?: RequestPlacesWhereInput | RequestPlacesWhereInput[]
    OR?: RequestPlacesWhereInput[]
    NOT?: RequestPlacesWhereInput | RequestPlacesWhereInput[]
    id?: UuidFilter<"RequestPlaces"> | string
    user_id?: UuidFilter<"RequestPlaces"> | string
    request_place?: StringFilter<"RequestPlaces"> | string
    UserInfo?: XOR<UserInfoScalarRelationFilter, UserInfoWhereInput>
  }

  export type RequestPlacesOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    request_place?: SortOrder
    UserInfo?: UserInfoOrderByWithRelationInput
  }

  export type RequestPlacesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RequestPlacesWhereInput | RequestPlacesWhereInput[]
    OR?: RequestPlacesWhereInput[]
    NOT?: RequestPlacesWhereInput | RequestPlacesWhereInput[]
    user_id?: UuidFilter<"RequestPlaces"> | string
    request_place?: StringFilter<"RequestPlaces"> | string
    UserInfo?: XOR<UserInfoScalarRelationFilter, UserInfoWhereInput>
  }, "id">

  export type RequestPlacesOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    request_place?: SortOrder
    _count?: RequestPlacesCountOrderByAggregateInput
    _max?: RequestPlacesMaxOrderByAggregateInput
    _min?: RequestPlacesMinOrderByAggregateInput
  }

  export type RequestPlacesScalarWhereWithAggregatesInput = {
    AND?: RequestPlacesScalarWhereWithAggregatesInput | RequestPlacesScalarWhereWithAggregatesInput[]
    OR?: RequestPlacesScalarWhereWithAggregatesInput[]
    NOT?: RequestPlacesScalarWhereWithAggregatesInput | RequestPlacesScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"RequestPlaces"> | string
    user_id?: UuidWithAggregatesFilter<"RequestPlaces"> | string
    request_place?: StringWithAggregatesFilter<"RequestPlaces"> | string
  }

  export type UserInfoWhereInput = {
    AND?: UserInfoWhereInput | UserInfoWhereInput[]
    OR?: UserInfoWhereInput[]
    NOT?: UserInfoWhereInput | UserInfoWhereInput[]
    id?: UuidFilter<"UserInfo"> | string
    created_at?: DateTimeFilter<"UserInfo"> | Date | string
    user_name?: StringFilter<"UserInfo"> | string
    user_age?: DecimalFilter<"UserInfo"> | Decimal | DecimalJsLike | number | string
    user_address?: StringFilter<"UserInfo"> | string
    user_phone?: StringFilter<"UserInfo"> | string
    user_occupation?: StringFilter<"UserInfo"> | string
    user_cardid?: StringFilter<"UserInfo"> | string
    user_reason?: StringFilter<"UserInfo"> | string
    AccidentInfo?: AccidentInfoListRelationFilter
    RequestPlaces?: RequestPlacesListRelationFilter
  }

  export type UserInfoOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    user_name?: SortOrder
    user_age?: SortOrder
    user_address?: SortOrder
    user_phone?: SortOrder
    user_occupation?: SortOrder
    user_cardid?: SortOrder
    user_reason?: SortOrder
    AccidentInfo?: AccidentInfoOrderByRelationAggregateInput
    RequestPlaces?: RequestPlacesOrderByRelationAggregateInput
  }

  export type UserInfoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserInfoWhereInput | UserInfoWhereInput[]
    OR?: UserInfoWhereInput[]
    NOT?: UserInfoWhereInput | UserInfoWhereInput[]
    created_at?: DateTimeFilter<"UserInfo"> | Date | string
    user_name?: StringFilter<"UserInfo"> | string
    user_age?: DecimalFilter<"UserInfo"> | Decimal | DecimalJsLike | number | string
    user_address?: StringFilter<"UserInfo"> | string
    user_phone?: StringFilter<"UserInfo"> | string
    user_occupation?: StringFilter<"UserInfo"> | string
    user_cardid?: StringFilter<"UserInfo"> | string
    user_reason?: StringFilter<"UserInfo"> | string
    AccidentInfo?: AccidentInfoListRelationFilter
    RequestPlaces?: RequestPlacesListRelationFilter
  }, "id">

  export type UserInfoOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    user_name?: SortOrder
    user_age?: SortOrder
    user_address?: SortOrder
    user_phone?: SortOrder
    user_occupation?: SortOrder
    user_cardid?: SortOrder
    user_reason?: SortOrder
    _count?: UserInfoCountOrderByAggregateInput
    _avg?: UserInfoAvgOrderByAggregateInput
    _max?: UserInfoMaxOrderByAggregateInput
    _min?: UserInfoMinOrderByAggregateInput
    _sum?: UserInfoSumOrderByAggregateInput
  }

  export type UserInfoScalarWhereWithAggregatesInput = {
    AND?: UserInfoScalarWhereWithAggregatesInput | UserInfoScalarWhereWithAggregatesInput[]
    OR?: UserInfoScalarWhereWithAggregatesInput[]
    NOT?: UserInfoScalarWhereWithAggregatesInput | UserInfoScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"UserInfo"> | string
    created_at?: DateTimeWithAggregatesFilter<"UserInfo"> | Date | string
    user_name?: StringWithAggregatesFilter<"UserInfo"> | string
    user_age?: DecimalWithAggregatesFilter<"UserInfo"> | Decimal | DecimalJsLike | number | string
    user_address?: StringWithAggregatesFilter<"UserInfo"> | string
    user_phone?: StringWithAggregatesFilter<"UserInfo"> | string
    user_occupation?: StringWithAggregatesFilter<"UserInfo"> | string
    user_cardid?: StringWithAggregatesFilter<"UserInfo"> | string
    user_reason?: StringWithAggregatesFilter<"UserInfo"> | string
  }

  export type AccidentInfoCreateInput = {
    id?: string
    acci_place: string
    acci_date: Date | string
    acci_time: Date | string
    security_contact_date: Date | string
    police_contact_date: Date | string
    police_contact_time: Date | string
    UserInfo?: UserInfoCreateNestedOneWithoutAccidentInfoInput
  }

  export type AccidentInfoUncheckedCreateInput = {
    id?: string
    user_id?: string
    acci_place: string
    acci_date: Date | string
    acci_time: Date | string
    security_contact_date: Date | string
    police_contact_date: Date | string
    police_contact_time: Date | string
  }

  export type AccidentInfoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    acci_place?: StringFieldUpdateOperationsInput | string
    acci_date?: DateTimeFieldUpdateOperationsInput | Date | string
    acci_time?: DateTimeFieldUpdateOperationsInput | Date | string
    security_contact_date?: DateTimeFieldUpdateOperationsInput | Date | string
    police_contact_date?: DateTimeFieldUpdateOperationsInput | Date | string
    police_contact_time?: DateTimeFieldUpdateOperationsInput | Date | string
    UserInfo?: UserInfoUpdateOneRequiredWithoutAccidentInfoNestedInput
  }

  export type AccidentInfoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    acci_place?: StringFieldUpdateOperationsInput | string
    acci_date?: DateTimeFieldUpdateOperationsInput | Date | string
    acci_time?: DateTimeFieldUpdateOperationsInput | Date | string
    security_contact_date?: DateTimeFieldUpdateOperationsInput | Date | string
    police_contact_date?: DateTimeFieldUpdateOperationsInput | Date | string
    police_contact_time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccidentInfoCreateManyInput = {
    id?: string
    user_id?: string
    acci_place: string
    acci_date: Date | string
    acci_time: Date | string
    security_contact_date: Date | string
    police_contact_date: Date | string
    police_contact_time: Date | string
  }

  export type AccidentInfoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    acci_place?: StringFieldUpdateOperationsInput | string
    acci_date?: DateTimeFieldUpdateOperationsInput | Date | string
    acci_time?: DateTimeFieldUpdateOperationsInput | Date | string
    security_contact_date?: DateTimeFieldUpdateOperationsInput | Date | string
    police_contact_date?: DateTimeFieldUpdateOperationsInput | Date | string
    police_contact_time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccidentInfoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    acci_place?: StringFieldUpdateOperationsInput | string
    acci_date?: DateTimeFieldUpdateOperationsInput | Date | string
    acci_time?: DateTimeFieldUpdateOperationsInput | Date | string
    security_contact_date?: DateTimeFieldUpdateOperationsInput | Date | string
    police_contact_date?: DateTimeFieldUpdateOperationsInput | Date | string
    police_contact_time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestPlacesCreateInput = {
    id?: string
    request_place: string
    UserInfo?: UserInfoCreateNestedOneWithoutRequestPlacesInput
  }

  export type RequestPlacesUncheckedCreateInput = {
    id?: string
    user_id?: string
    request_place: string
  }

  export type RequestPlacesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    request_place?: StringFieldUpdateOperationsInput | string
    UserInfo?: UserInfoUpdateOneRequiredWithoutRequestPlacesNestedInput
  }

  export type RequestPlacesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    request_place?: StringFieldUpdateOperationsInput | string
  }

  export type RequestPlacesCreateManyInput = {
    id?: string
    user_id?: string
    request_place: string
  }

  export type RequestPlacesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    request_place?: StringFieldUpdateOperationsInput | string
  }

  export type RequestPlacesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    request_place?: StringFieldUpdateOperationsInput | string
  }

  export type UserInfoCreateInput = {
    id?: string
    created_at?: Date | string
    user_name: string
    user_age: Decimal | DecimalJsLike | number | string
    user_address: string
    user_phone: string
    user_occupation: string
    user_cardid: string
    user_reason: string
    AccidentInfo?: AccidentInfoCreateNestedManyWithoutUserInfoInput
    RequestPlaces?: RequestPlacesCreateNestedManyWithoutUserInfoInput
  }

  export type UserInfoUncheckedCreateInput = {
    id?: string
    created_at?: Date | string
    user_name: string
    user_age: Decimal | DecimalJsLike | number | string
    user_address: string
    user_phone: string
    user_occupation: string
    user_cardid: string
    user_reason: string
    AccidentInfo?: AccidentInfoUncheckedCreateNestedManyWithoutUserInfoInput
    RequestPlaces?: RequestPlacesUncheckedCreateNestedManyWithoutUserInfoInput
  }

  export type UserInfoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_name?: StringFieldUpdateOperationsInput | string
    user_age?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    user_address?: StringFieldUpdateOperationsInput | string
    user_phone?: StringFieldUpdateOperationsInput | string
    user_occupation?: StringFieldUpdateOperationsInput | string
    user_cardid?: StringFieldUpdateOperationsInput | string
    user_reason?: StringFieldUpdateOperationsInput | string
    AccidentInfo?: AccidentInfoUpdateManyWithoutUserInfoNestedInput
    RequestPlaces?: RequestPlacesUpdateManyWithoutUserInfoNestedInput
  }

  export type UserInfoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_name?: StringFieldUpdateOperationsInput | string
    user_age?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    user_address?: StringFieldUpdateOperationsInput | string
    user_phone?: StringFieldUpdateOperationsInput | string
    user_occupation?: StringFieldUpdateOperationsInput | string
    user_cardid?: StringFieldUpdateOperationsInput | string
    user_reason?: StringFieldUpdateOperationsInput | string
    AccidentInfo?: AccidentInfoUncheckedUpdateManyWithoutUserInfoNestedInput
    RequestPlaces?: RequestPlacesUncheckedUpdateManyWithoutUserInfoNestedInput
  }

  export type UserInfoCreateManyInput = {
    id?: string
    created_at?: Date | string
    user_name: string
    user_age: Decimal | DecimalJsLike | number | string
    user_address: string
    user_phone: string
    user_occupation: string
    user_cardid: string
    user_reason: string
  }

  export type UserInfoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_name?: StringFieldUpdateOperationsInput | string
    user_age?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    user_address?: StringFieldUpdateOperationsInput | string
    user_phone?: StringFieldUpdateOperationsInput | string
    user_occupation?: StringFieldUpdateOperationsInput | string
    user_cardid?: StringFieldUpdateOperationsInput | string
    user_reason?: StringFieldUpdateOperationsInput | string
  }

  export type UserInfoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_name?: StringFieldUpdateOperationsInput | string
    user_age?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    user_address?: StringFieldUpdateOperationsInput | string
    user_phone?: StringFieldUpdateOperationsInput | string
    user_occupation?: StringFieldUpdateOperationsInput | string
    user_cardid?: StringFieldUpdateOperationsInput | string
    user_reason?: StringFieldUpdateOperationsInput | string
  }

  export type UuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserInfoScalarRelationFilter = {
    is?: UserInfoWhereInput
    isNot?: UserInfoWhereInput
  }

  export type AccidentInfoCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    acci_place?: SortOrder
    acci_date?: SortOrder
    acci_time?: SortOrder
    security_contact_date?: SortOrder
    police_contact_date?: SortOrder
    police_contact_time?: SortOrder
  }

  export type AccidentInfoMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    acci_place?: SortOrder
    acci_date?: SortOrder
    acci_time?: SortOrder
    security_contact_date?: SortOrder
    police_contact_date?: SortOrder
    police_contact_time?: SortOrder
  }

  export type AccidentInfoMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    acci_place?: SortOrder
    acci_date?: SortOrder
    acci_time?: SortOrder
    security_contact_date?: SortOrder
    police_contact_date?: SortOrder
    police_contact_time?: SortOrder
  }

  export type UuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type RequestPlacesCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    request_place?: SortOrder
  }

  export type RequestPlacesMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    request_place?: SortOrder
  }

  export type RequestPlacesMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    request_place?: SortOrder
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type AccidentInfoListRelationFilter = {
    every?: AccidentInfoWhereInput
    some?: AccidentInfoWhereInput
    none?: AccidentInfoWhereInput
  }

  export type RequestPlacesListRelationFilter = {
    every?: RequestPlacesWhereInput
    some?: RequestPlacesWhereInput
    none?: RequestPlacesWhereInput
  }

  export type AccidentInfoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RequestPlacesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserInfoCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    user_name?: SortOrder
    user_age?: SortOrder
    user_address?: SortOrder
    user_phone?: SortOrder
    user_occupation?: SortOrder
    user_cardid?: SortOrder
    user_reason?: SortOrder
  }

  export type UserInfoAvgOrderByAggregateInput = {
    user_age?: SortOrder
  }

  export type UserInfoMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    user_name?: SortOrder
    user_age?: SortOrder
    user_address?: SortOrder
    user_phone?: SortOrder
    user_occupation?: SortOrder
    user_cardid?: SortOrder
    user_reason?: SortOrder
  }

  export type UserInfoMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    user_name?: SortOrder
    user_age?: SortOrder
    user_address?: SortOrder
    user_phone?: SortOrder
    user_occupation?: SortOrder
    user_cardid?: SortOrder
    user_reason?: SortOrder
  }

  export type UserInfoSumOrderByAggregateInput = {
    user_age?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type UserInfoCreateNestedOneWithoutAccidentInfoInput = {
    create?: XOR<UserInfoCreateWithoutAccidentInfoInput, UserInfoUncheckedCreateWithoutAccidentInfoInput>
    connectOrCreate?: UserInfoCreateOrConnectWithoutAccidentInfoInput
    connect?: UserInfoWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserInfoUpdateOneRequiredWithoutAccidentInfoNestedInput = {
    create?: XOR<UserInfoCreateWithoutAccidentInfoInput, UserInfoUncheckedCreateWithoutAccidentInfoInput>
    connectOrCreate?: UserInfoCreateOrConnectWithoutAccidentInfoInput
    upsert?: UserInfoUpsertWithoutAccidentInfoInput
    connect?: UserInfoWhereUniqueInput
    update?: XOR<XOR<UserInfoUpdateToOneWithWhereWithoutAccidentInfoInput, UserInfoUpdateWithoutAccidentInfoInput>, UserInfoUncheckedUpdateWithoutAccidentInfoInput>
  }

  export type UserInfoCreateNestedOneWithoutRequestPlacesInput = {
    create?: XOR<UserInfoCreateWithoutRequestPlacesInput, UserInfoUncheckedCreateWithoutRequestPlacesInput>
    connectOrCreate?: UserInfoCreateOrConnectWithoutRequestPlacesInput
    connect?: UserInfoWhereUniqueInput
  }

  export type UserInfoUpdateOneRequiredWithoutRequestPlacesNestedInput = {
    create?: XOR<UserInfoCreateWithoutRequestPlacesInput, UserInfoUncheckedCreateWithoutRequestPlacesInput>
    connectOrCreate?: UserInfoCreateOrConnectWithoutRequestPlacesInput
    upsert?: UserInfoUpsertWithoutRequestPlacesInput
    connect?: UserInfoWhereUniqueInput
    update?: XOR<XOR<UserInfoUpdateToOneWithWhereWithoutRequestPlacesInput, UserInfoUpdateWithoutRequestPlacesInput>, UserInfoUncheckedUpdateWithoutRequestPlacesInput>
  }

  export type AccidentInfoCreateNestedManyWithoutUserInfoInput = {
    create?: XOR<AccidentInfoCreateWithoutUserInfoInput, AccidentInfoUncheckedCreateWithoutUserInfoInput> | AccidentInfoCreateWithoutUserInfoInput[] | AccidentInfoUncheckedCreateWithoutUserInfoInput[]
    connectOrCreate?: AccidentInfoCreateOrConnectWithoutUserInfoInput | AccidentInfoCreateOrConnectWithoutUserInfoInput[]
    createMany?: AccidentInfoCreateManyUserInfoInputEnvelope
    connect?: AccidentInfoWhereUniqueInput | AccidentInfoWhereUniqueInput[]
  }

  export type RequestPlacesCreateNestedManyWithoutUserInfoInput = {
    create?: XOR<RequestPlacesCreateWithoutUserInfoInput, RequestPlacesUncheckedCreateWithoutUserInfoInput> | RequestPlacesCreateWithoutUserInfoInput[] | RequestPlacesUncheckedCreateWithoutUserInfoInput[]
    connectOrCreate?: RequestPlacesCreateOrConnectWithoutUserInfoInput | RequestPlacesCreateOrConnectWithoutUserInfoInput[]
    createMany?: RequestPlacesCreateManyUserInfoInputEnvelope
    connect?: RequestPlacesWhereUniqueInput | RequestPlacesWhereUniqueInput[]
  }

  export type AccidentInfoUncheckedCreateNestedManyWithoutUserInfoInput = {
    create?: XOR<AccidentInfoCreateWithoutUserInfoInput, AccidentInfoUncheckedCreateWithoutUserInfoInput> | AccidentInfoCreateWithoutUserInfoInput[] | AccidentInfoUncheckedCreateWithoutUserInfoInput[]
    connectOrCreate?: AccidentInfoCreateOrConnectWithoutUserInfoInput | AccidentInfoCreateOrConnectWithoutUserInfoInput[]
    createMany?: AccidentInfoCreateManyUserInfoInputEnvelope
    connect?: AccidentInfoWhereUniqueInput | AccidentInfoWhereUniqueInput[]
  }

  export type RequestPlacesUncheckedCreateNestedManyWithoutUserInfoInput = {
    create?: XOR<RequestPlacesCreateWithoutUserInfoInput, RequestPlacesUncheckedCreateWithoutUserInfoInput> | RequestPlacesCreateWithoutUserInfoInput[] | RequestPlacesUncheckedCreateWithoutUserInfoInput[]
    connectOrCreate?: RequestPlacesCreateOrConnectWithoutUserInfoInput | RequestPlacesCreateOrConnectWithoutUserInfoInput[]
    createMany?: RequestPlacesCreateManyUserInfoInputEnvelope
    connect?: RequestPlacesWhereUniqueInput | RequestPlacesWhereUniqueInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type AccidentInfoUpdateManyWithoutUserInfoNestedInput = {
    create?: XOR<AccidentInfoCreateWithoutUserInfoInput, AccidentInfoUncheckedCreateWithoutUserInfoInput> | AccidentInfoCreateWithoutUserInfoInput[] | AccidentInfoUncheckedCreateWithoutUserInfoInput[]
    connectOrCreate?: AccidentInfoCreateOrConnectWithoutUserInfoInput | AccidentInfoCreateOrConnectWithoutUserInfoInput[]
    upsert?: AccidentInfoUpsertWithWhereUniqueWithoutUserInfoInput | AccidentInfoUpsertWithWhereUniqueWithoutUserInfoInput[]
    createMany?: AccidentInfoCreateManyUserInfoInputEnvelope
    set?: AccidentInfoWhereUniqueInput | AccidentInfoWhereUniqueInput[]
    disconnect?: AccidentInfoWhereUniqueInput | AccidentInfoWhereUniqueInput[]
    delete?: AccidentInfoWhereUniqueInput | AccidentInfoWhereUniqueInput[]
    connect?: AccidentInfoWhereUniqueInput | AccidentInfoWhereUniqueInput[]
    update?: AccidentInfoUpdateWithWhereUniqueWithoutUserInfoInput | AccidentInfoUpdateWithWhereUniqueWithoutUserInfoInput[]
    updateMany?: AccidentInfoUpdateManyWithWhereWithoutUserInfoInput | AccidentInfoUpdateManyWithWhereWithoutUserInfoInput[]
    deleteMany?: AccidentInfoScalarWhereInput | AccidentInfoScalarWhereInput[]
  }

  export type RequestPlacesUpdateManyWithoutUserInfoNestedInput = {
    create?: XOR<RequestPlacesCreateWithoutUserInfoInput, RequestPlacesUncheckedCreateWithoutUserInfoInput> | RequestPlacesCreateWithoutUserInfoInput[] | RequestPlacesUncheckedCreateWithoutUserInfoInput[]
    connectOrCreate?: RequestPlacesCreateOrConnectWithoutUserInfoInput | RequestPlacesCreateOrConnectWithoutUserInfoInput[]
    upsert?: RequestPlacesUpsertWithWhereUniqueWithoutUserInfoInput | RequestPlacesUpsertWithWhereUniqueWithoutUserInfoInput[]
    createMany?: RequestPlacesCreateManyUserInfoInputEnvelope
    set?: RequestPlacesWhereUniqueInput | RequestPlacesWhereUniqueInput[]
    disconnect?: RequestPlacesWhereUniqueInput | RequestPlacesWhereUniqueInput[]
    delete?: RequestPlacesWhereUniqueInput | RequestPlacesWhereUniqueInput[]
    connect?: RequestPlacesWhereUniqueInput | RequestPlacesWhereUniqueInput[]
    update?: RequestPlacesUpdateWithWhereUniqueWithoutUserInfoInput | RequestPlacesUpdateWithWhereUniqueWithoutUserInfoInput[]
    updateMany?: RequestPlacesUpdateManyWithWhereWithoutUserInfoInput | RequestPlacesUpdateManyWithWhereWithoutUserInfoInput[]
    deleteMany?: RequestPlacesScalarWhereInput | RequestPlacesScalarWhereInput[]
  }

  export type AccidentInfoUncheckedUpdateManyWithoutUserInfoNestedInput = {
    create?: XOR<AccidentInfoCreateWithoutUserInfoInput, AccidentInfoUncheckedCreateWithoutUserInfoInput> | AccidentInfoCreateWithoutUserInfoInput[] | AccidentInfoUncheckedCreateWithoutUserInfoInput[]
    connectOrCreate?: AccidentInfoCreateOrConnectWithoutUserInfoInput | AccidentInfoCreateOrConnectWithoutUserInfoInput[]
    upsert?: AccidentInfoUpsertWithWhereUniqueWithoutUserInfoInput | AccidentInfoUpsertWithWhereUniqueWithoutUserInfoInput[]
    createMany?: AccidentInfoCreateManyUserInfoInputEnvelope
    set?: AccidentInfoWhereUniqueInput | AccidentInfoWhereUniqueInput[]
    disconnect?: AccidentInfoWhereUniqueInput | AccidentInfoWhereUniqueInput[]
    delete?: AccidentInfoWhereUniqueInput | AccidentInfoWhereUniqueInput[]
    connect?: AccidentInfoWhereUniqueInput | AccidentInfoWhereUniqueInput[]
    update?: AccidentInfoUpdateWithWhereUniqueWithoutUserInfoInput | AccidentInfoUpdateWithWhereUniqueWithoutUserInfoInput[]
    updateMany?: AccidentInfoUpdateManyWithWhereWithoutUserInfoInput | AccidentInfoUpdateManyWithWhereWithoutUserInfoInput[]
    deleteMany?: AccidentInfoScalarWhereInput | AccidentInfoScalarWhereInput[]
  }

  export type RequestPlacesUncheckedUpdateManyWithoutUserInfoNestedInput = {
    create?: XOR<RequestPlacesCreateWithoutUserInfoInput, RequestPlacesUncheckedCreateWithoutUserInfoInput> | RequestPlacesCreateWithoutUserInfoInput[] | RequestPlacesUncheckedCreateWithoutUserInfoInput[]
    connectOrCreate?: RequestPlacesCreateOrConnectWithoutUserInfoInput | RequestPlacesCreateOrConnectWithoutUserInfoInput[]
    upsert?: RequestPlacesUpsertWithWhereUniqueWithoutUserInfoInput | RequestPlacesUpsertWithWhereUniqueWithoutUserInfoInput[]
    createMany?: RequestPlacesCreateManyUserInfoInputEnvelope
    set?: RequestPlacesWhereUniqueInput | RequestPlacesWhereUniqueInput[]
    disconnect?: RequestPlacesWhereUniqueInput | RequestPlacesWhereUniqueInput[]
    delete?: RequestPlacesWhereUniqueInput | RequestPlacesWhereUniqueInput[]
    connect?: RequestPlacesWhereUniqueInput | RequestPlacesWhereUniqueInput[]
    update?: RequestPlacesUpdateWithWhereUniqueWithoutUserInfoInput | RequestPlacesUpdateWithWhereUniqueWithoutUserInfoInput[]
    updateMany?: RequestPlacesUpdateManyWithWhereWithoutUserInfoInput | RequestPlacesUpdateManyWithWhereWithoutUserInfoInput[]
    deleteMany?: RequestPlacesScalarWhereInput | RequestPlacesScalarWhereInput[]
  }

  export type NestedUuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedUuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type UserInfoCreateWithoutAccidentInfoInput = {
    id?: string
    created_at?: Date | string
    user_name: string
    user_age: Decimal | DecimalJsLike | number | string
    user_address: string
    user_phone: string
    user_occupation: string
    user_cardid: string
    user_reason: string
    RequestPlaces?: RequestPlacesCreateNestedManyWithoutUserInfoInput
  }

  export type UserInfoUncheckedCreateWithoutAccidentInfoInput = {
    id?: string
    created_at?: Date | string
    user_name: string
    user_age: Decimal | DecimalJsLike | number | string
    user_address: string
    user_phone: string
    user_occupation: string
    user_cardid: string
    user_reason: string
    RequestPlaces?: RequestPlacesUncheckedCreateNestedManyWithoutUserInfoInput
  }

  export type UserInfoCreateOrConnectWithoutAccidentInfoInput = {
    where: UserInfoWhereUniqueInput
    create: XOR<UserInfoCreateWithoutAccidentInfoInput, UserInfoUncheckedCreateWithoutAccidentInfoInput>
  }

  export type UserInfoUpsertWithoutAccidentInfoInput = {
    update: XOR<UserInfoUpdateWithoutAccidentInfoInput, UserInfoUncheckedUpdateWithoutAccidentInfoInput>
    create: XOR<UserInfoCreateWithoutAccidentInfoInput, UserInfoUncheckedCreateWithoutAccidentInfoInput>
    where?: UserInfoWhereInput
  }

  export type UserInfoUpdateToOneWithWhereWithoutAccidentInfoInput = {
    where?: UserInfoWhereInput
    data: XOR<UserInfoUpdateWithoutAccidentInfoInput, UserInfoUncheckedUpdateWithoutAccidentInfoInput>
  }

  export type UserInfoUpdateWithoutAccidentInfoInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_name?: StringFieldUpdateOperationsInput | string
    user_age?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    user_address?: StringFieldUpdateOperationsInput | string
    user_phone?: StringFieldUpdateOperationsInput | string
    user_occupation?: StringFieldUpdateOperationsInput | string
    user_cardid?: StringFieldUpdateOperationsInput | string
    user_reason?: StringFieldUpdateOperationsInput | string
    RequestPlaces?: RequestPlacesUpdateManyWithoutUserInfoNestedInput
  }

  export type UserInfoUncheckedUpdateWithoutAccidentInfoInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_name?: StringFieldUpdateOperationsInput | string
    user_age?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    user_address?: StringFieldUpdateOperationsInput | string
    user_phone?: StringFieldUpdateOperationsInput | string
    user_occupation?: StringFieldUpdateOperationsInput | string
    user_cardid?: StringFieldUpdateOperationsInput | string
    user_reason?: StringFieldUpdateOperationsInput | string
    RequestPlaces?: RequestPlacesUncheckedUpdateManyWithoutUserInfoNestedInput
  }

  export type UserInfoCreateWithoutRequestPlacesInput = {
    id?: string
    created_at?: Date | string
    user_name: string
    user_age: Decimal | DecimalJsLike | number | string
    user_address: string
    user_phone: string
    user_occupation: string
    user_cardid: string
    user_reason: string
    AccidentInfo?: AccidentInfoCreateNestedManyWithoutUserInfoInput
  }

  export type UserInfoUncheckedCreateWithoutRequestPlacesInput = {
    id?: string
    created_at?: Date | string
    user_name: string
    user_age: Decimal | DecimalJsLike | number | string
    user_address: string
    user_phone: string
    user_occupation: string
    user_cardid: string
    user_reason: string
    AccidentInfo?: AccidentInfoUncheckedCreateNestedManyWithoutUserInfoInput
  }

  export type UserInfoCreateOrConnectWithoutRequestPlacesInput = {
    where: UserInfoWhereUniqueInput
    create: XOR<UserInfoCreateWithoutRequestPlacesInput, UserInfoUncheckedCreateWithoutRequestPlacesInput>
  }

  export type UserInfoUpsertWithoutRequestPlacesInput = {
    update: XOR<UserInfoUpdateWithoutRequestPlacesInput, UserInfoUncheckedUpdateWithoutRequestPlacesInput>
    create: XOR<UserInfoCreateWithoutRequestPlacesInput, UserInfoUncheckedCreateWithoutRequestPlacesInput>
    where?: UserInfoWhereInput
  }

  export type UserInfoUpdateToOneWithWhereWithoutRequestPlacesInput = {
    where?: UserInfoWhereInput
    data: XOR<UserInfoUpdateWithoutRequestPlacesInput, UserInfoUncheckedUpdateWithoutRequestPlacesInput>
  }

  export type UserInfoUpdateWithoutRequestPlacesInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_name?: StringFieldUpdateOperationsInput | string
    user_age?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    user_address?: StringFieldUpdateOperationsInput | string
    user_phone?: StringFieldUpdateOperationsInput | string
    user_occupation?: StringFieldUpdateOperationsInput | string
    user_cardid?: StringFieldUpdateOperationsInput | string
    user_reason?: StringFieldUpdateOperationsInput | string
    AccidentInfo?: AccidentInfoUpdateManyWithoutUserInfoNestedInput
  }

  export type UserInfoUncheckedUpdateWithoutRequestPlacesInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_name?: StringFieldUpdateOperationsInput | string
    user_age?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    user_address?: StringFieldUpdateOperationsInput | string
    user_phone?: StringFieldUpdateOperationsInput | string
    user_occupation?: StringFieldUpdateOperationsInput | string
    user_cardid?: StringFieldUpdateOperationsInput | string
    user_reason?: StringFieldUpdateOperationsInput | string
    AccidentInfo?: AccidentInfoUncheckedUpdateManyWithoutUserInfoNestedInput
  }

  export type AccidentInfoCreateWithoutUserInfoInput = {
    id?: string
    acci_place: string
    acci_date: Date | string
    acci_time: Date | string
    security_contact_date: Date | string
    police_contact_date: Date | string
    police_contact_time: Date | string
  }

  export type AccidentInfoUncheckedCreateWithoutUserInfoInput = {
    id?: string
    acci_place: string
    acci_date: Date | string
    acci_time: Date | string
    security_contact_date: Date | string
    police_contact_date: Date | string
    police_contact_time: Date | string
  }

  export type AccidentInfoCreateOrConnectWithoutUserInfoInput = {
    where: AccidentInfoWhereUniqueInput
    create: XOR<AccidentInfoCreateWithoutUserInfoInput, AccidentInfoUncheckedCreateWithoutUserInfoInput>
  }

  export type AccidentInfoCreateManyUserInfoInputEnvelope = {
    data: AccidentInfoCreateManyUserInfoInput | AccidentInfoCreateManyUserInfoInput[]
    skipDuplicates?: boolean
  }

  export type RequestPlacesCreateWithoutUserInfoInput = {
    id?: string
    request_place: string
  }

  export type RequestPlacesUncheckedCreateWithoutUserInfoInput = {
    id?: string
    request_place: string
  }

  export type RequestPlacesCreateOrConnectWithoutUserInfoInput = {
    where: RequestPlacesWhereUniqueInput
    create: XOR<RequestPlacesCreateWithoutUserInfoInput, RequestPlacesUncheckedCreateWithoutUserInfoInput>
  }

  export type RequestPlacesCreateManyUserInfoInputEnvelope = {
    data: RequestPlacesCreateManyUserInfoInput | RequestPlacesCreateManyUserInfoInput[]
    skipDuplicates?: boolean
  }

  export type AccidentInfoUpsertWithWhereUniqueWithoutUserInfoInput = {
    where: AccidentInfoWhereUniqueInput
    update: XOR<AccidentInfoUpdateWithoutUserInfoInput, AccidentInfoUncheckedUpdateWithoutUserInfoInput>
    create: XOR<AccidentInfoCreateWithoutUserInfoInput, AccidentInfoUncheckedCreateWithoutUserInfoInput>
  }

  export type AccidentInfoUpdateWithWhereUniqueWithoutUserInfoInput = {
    where: AccidentInfoWhereUniqueInput
    data: XOR<AccidentInfoUpdateWithoutUserInfoInput, AccidentInfoUncheckedUpdateWithoutUserInfoInput>
  }

  export type AccidentInfoUpdateManyWithWhereWithoutUserInfoInput = {
    where: AccidentInfoScalarWhereInput
    data: XOR<AccidentInfoUpdateManyMutationInput, AccidentInfoUncheckedUpdateManyWithoutUserInfoInput>
  }

  export type AccidentInfoScalarWhereInput = {
    AND?: AccidentInfoScalarWhereInput | AccidentInfoScalarWhereInput[]
    OR?: AccidentInfoScalarWhereInput[]
    NOT?: AccidentInfoScalarWhereInput | AccidentInfoScalarWhereInput[]
    id?: UuidFilter<"AccidentInfo"> | string
    user_id?: UuidFilter<"AccidentInfo"> | string
    acci_place?: StringFilter<"AccidentInfo"> | string
    acci_date?: DateTimeFilter<"AccidentInfo"> | Date | string
    acci_time?: DateTimeFilter<"AccidentInfo"> | Date | string
    security_contact_date?: DateTimeFilter<"AccidentInfo"> | Date | string
    police_contact_date?: DateTimeFilter<"AccidentInfo"> | Date | string
    police_contact_time?: DateTimeFilter<"AccidentInfo"> | Date | string
  }

  export type RequestPlacesUpsertWithWhereUniqueWithoutUserInfoInput = {
    where: RequestPlacesWhereUniqueInput
    update: XOR<RequestPlacesUpdateWithoutUserInfoInput, RequestPlacesUncheckedUpdateWithoutUserInfoInput>
    create: XOR<RequestPlacesCreateWithoutUserInfoInput, RequestPlacesUncheckedCreateWithoutUserInfoInput>
  }

  export type RequestPlacesUpdateWithWhereUniqueWithoutUserInfoInput = {
    where: RequestPlacesWhereUniqueInput
    data: XOR<RequestPlacesUpdateWithoutUserInfoInput, RequestPlacesUncheckedUpdateWithoutUserInfoInput>
  }

  export type RequestPlacesUpdateManyWithWhereWithoutUserInfoInput = {
    where: RequestPlacesScalarWhereInput
    data: XOR<RequestPlacesUpdateManyMutationInput, RequestPlacesUncheckedUpdateManyWithoutUserInfoInput>
  }

  export type RequestPlacesScalarWhereInput = {
    AND?: RequestPlacesScalarWhereInput | RequestPlacesScalarWhereInput[]
    OR?: RequestPlacesScalarWhereInput[]
    NOT?: RequestPlacesScalarWhereInput | RequestPlacesScalarWhereInput[]
    id?: UuidFilter<"RequestPlaces"> | string
    user_id?: UuidFilter<"RequestPlaces"> | string
    request_place?: StringFilter<"RequestPlaces"> | string
  }

  export type AccidentInfoCreateManyUserInfoInput = {
    id?: string
    acci_place: string
    acci_date: Date | string
    acci_time: Date | string
    security_contact_date: Date | string
    police_contact_date: Date | string
    police_contact_time: Date | string
  }

  export type RequestPlacesCreateManyUserInfoInput = {
    id?: string
    request_place: string
  }

  export type AccidentInfoUpdateWithoutUserInfoInput = {
    id?: StringFieldUpdateOperationsInput | string
    acci_place?: StringFieldUpdateOperationsInput | string
    acci_date?: DateTimeFieldUpdateOperationsInput | Date | string
    acci_time?: DateTimeFieldUpdateOperationsInput | Date | string
    security_contact_date?: DateTimeFieldUpdateOperationsInput | Date | string
    police_contact_date?: DateTimeFieldUpdateOperationsInput | Date | string
    police_contact_time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccidentInfoUncheckedUpdateWithoutUserInfoInput = {
    id?: StringFieldUpdateOperationsInput | string
    acci_place?: StringFieldUpdateOperationsInput | string
    acci_date?: DateTimeFieldUpdateOperationsInput | Date | string
    acci_time?: DateTimeFieldUpdateOperationsInput | Date | string
    security_contact_date?: DateTimeFieldUpdateOperationsInput | Date | string
    police_contact_date?: DateTimeFieldUpdateOperationsInput | Date | string
    police_contact_time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccidentInfoUncheckedUpdateManyWithoutUserInfoInput = {
    id?: StringFieldUpdateOperationsInput | string
    acci_place?: StringFieldUpdateOperationsInput | string
    acci_date?: DateTimeFieldUpdateOperationsInput | Date | string
    acci_time?: DateTimeFieldUpdateOperationsInput | Date | string
    security_contact_date?: DateTimeFieldUpdateOperationsInput | Date | string
    police_contact_date?: DateTimeFieldUpdateOperationsInput | Date | string
    police_contact_time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestPlacesUpdateWithoutUserInfoInput = {
    id?: StringFieldUpdateOperationsInput | string
    request_place?: StringFieldUpdateOperationsInput | string
  }

  export type RequestPlacesUncheckedUpdateWithoutUserInfoInput = {
    id?: StringFieldUpdateOperationsInput | string
    request_place?: StringFieldUpdateOperationsInput | string
  }

  export type RequestPlacesUncheckedUpdateManyWithoutUserInfoInput = {
    id?: StringFieldUpdateOperationsInput | string
    request_place?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}